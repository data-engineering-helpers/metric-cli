# coding: utf-8

"""
    Tableau Services APIs

    Open API specification for Tableau Services APIs

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.tableau_metricqueryservice_v1_batch_get_definitions_by_post_request import TableauMetricqueryserviceV1BatchGetDefinitionsByPostRequest
from openapi_client.models.tableau_metricqueryservice_v1_batch_get_definitions_by_post_response import TableauMetricqueryserviceV1BatchGetDefinitionsByPostResponse
from openapi_client.models.tableau_metricqueryservice_v1_batch_get_definitions_response import TableauMetricqueryserviceV1BatchGetDefinitionsResponse
from openapi_client.models.tableau_metricqueryservice_v1_batch_get_metrics_response import TableauMetricqueryserviceV1BatchGetMetricsResponse
from openapi_client.models.tableau_metricqueryservice_v1_create_definition_request import TableauMetricqueryserviceV1CreateDefinitionRequest
from openapi_client.models.tableau_metricqueryservice_v1_create_definition_response import TableauMetricqueryserviceV1CreateDefinitionResponse
from openapi_client.models.tableau_metricqueryservice_v1_create_metric_request import TableauMetricqueryserviceV1CreateMetricRequest
from openapi_client.models.tableau_metricqueryservice_v1_create_metric_response import TableauMetricqueryserviceV1CreateMetricResponse
from openapi_client.models.tableau_metricqueryservice_v1_get_definition_response import TableauMetricqueryserviceV1GetDefinitionResponse
from openapi_client.models.tableau_metricqueryservice_v1_get_metric_response import TableauMetricqueryserviceV1GetMetricResponse
from openapi_client.models.tableau_metricqueryservice_v1_get_or_create_metric_request import TableauMetricqueryserviceV1GetOrCreateMetricRequest
from openapi_client.models.tableau_metricqueryservice_v1_get_or_create_metric_response import TableauMetricqueryserviceV1GetOrCreateMetricResponse
from openapi_client.models.tableau_metricqueryservice_v1_list_definitions_response import TableauMetricqueryserviceV1ListDefinitionsResponse
from openapi_client.models.tableau_metricqueryservice_v1_list_metrics_response import TableauMetricqueryserviceV1ListMetricsResponse
from openapi_client.models.tableau_metricqueryservice_v1_update_definition_request import TableauMetricqueryserviceV1UpdateDefinitionRequest
from openapi_client.models.tableau_metricqueryservice_v1_update_definition_response import TableauMetricqueryserviceV1UpdateDefinitionResponse
from openapi_client.models.tableau_metricqueryservice_v1_update_metric_request import TableauMetricqueryserviceV1UpdateMetricRequest
from openapi_client.models.tableau_metricqueryservice_v1_update_metric_response import TableauMetricqueryserviceV1UpdateMetricResponse
from openapi_client.models.tableau_pulse_subscriptionservice_v1_list_followed_metrics_groups_response import TableauPulseSubscriptionserviceV1ListFollowedMetricsGroupsResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class MetricDefinitionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def metric_query_service_batch_get_definitions(
        self,
        definition_ids: Optional[StrictStr] = None,
        view: Optional[StrictStr] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        number_of_metrics: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauMetricqueryserviceV1BatchGetDefinitionsResponse:
        """Gets a batch of definition and metrics available on a server.

        Gets batches of definitions and metrics available on a server. Only metrics a user has privileges to view will be visible.

        :param definition_ids: 
        :type definition_ids: str
        :param view: 
        :type view: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param number_of_metrics: 
        :type number_of_metrics: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_batch_get_definitions_serialize(
            definition_ids=definition_ids,
            view=view,
            x_tableau_auth=x_tableau_auth,
            number_of_metrics=number_of_metrics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1BatchGetDefinitionsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metric_query_service_batch_get_definitions_with_http_info(
        self,
        definition_ids: Optional[StrictStr] = None,
        view: Optional[StrictStr] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        number_of_metrics: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauMetricqueryserviceV1BatchGetDefinitionsResponse]:
        """Gets a batch of definition and metrics available on a server.

        Gets batches of definitions and metrics available on a server. Only metrics a user has privileges to view will be visible.

        :param definition_ids: 
        :type definition_ids: str
        :param view: 
        :type view: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param number_of_metrics: 
        :type number_of_metrics: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_batch_get_definitions_serialize(
            definition_ids=definition_ids,
            view=view,
            x_tableau_auth=x_tableau_auth,
            number_of_metrics=number_of_metrics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1BatchGetDefinitionsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metric_query_service_batch_get_definitions_without_preload_content(
        self,
        definition_ids: Optional[StrictStr] = None,
        view: Optional[StrictStr] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        number_of_metrics: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets a batch of definition and metrics available on a server.

        Gets batches of definitions and metrics available on a server. Only metrics a user has privileges to view will be visible.

        :param definition_ids: 
        :type definition_ids: str
        :param view: 
        :type view: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param number_of_metrics: 
        :type number_of_metrics: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_batch_get_definitions_serialize(
            definition_ids=definition_ids,
            view=view,
            x_tableau_auth=x_tableau_auth,
            number_of_metrics=number_of_metrics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1BatchGetDefinitionsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metric_query_service_batch_get_definitions_serialize(
        self,
        definition_ids,
        view,
        x_tableau_auth,
        number_of_metrics,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if definition_ids is not None:
            
            _query_params.append(('definition_ids', definition_ids))
            
        if view is not None:
            
            _query_params.append(('view', view))
            
        if number_of_metrics is not None:
            
            _query_params.append(('number_of_metrics', number_of_metrics))
            
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.metricqueryservice.v1.BatchGetDefinitionsResponse+json', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/-/pulse/definitions:batchGet',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metric_query_service_batch_get_definitions_by_post(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_batch_get_definitions_by_post_request: Optional[TableauMetricqueryserviceV1BatchGetDefinitionsByPostRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauMetricqueryserviceV1BatchGetDefinitionsByPostResponse:
        """Gets a batch of definition and metrics available on a server.

        Gets batches of definitions and metrics available on a server. Only metrics a user has privileges to view will be visible.  This endpoint uses POST as an alternative to GET, where long lists of URL parameters could be problematic.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_batch_get_definitions_by_post_request:
        :type tableau_metricqueryservice_v1_batch_get_definitions_by_post_request: TableauMetricqueryserviceV1BatchGetDefinitionsByPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_batch_get_definitions_by_post_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_batch_get_definitions_by_post_request=tableau_metricqueryservice_v1_batch_get_definitions_by_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauMetricqueryserviceV1BatchGetDefinitionsByPostResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metric_query_service_batch_get_definitions_by_post_with_http_info(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_batch_get_definitions_by_post_request: Optional[TableauMetricqueryserviceV1BatchGetDefinitionsByPostRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauMetricqueryserviceV1BatchGetDefinitionsByPostResponse]:
        """Gets a batch of definition and metrics available on a server.

        Gets batches of definitions and metrics available on a server. Only metrics a user has privileges to view will be visible.  This endpoint uses POST as an alternative to GET, where long lists of URL parameters could be problematic.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_batch_get_definitions_by_post_request:
        :type tableau_metricqueryservice_v1_batch_get_definitions_by_post_request: TableauMetricqueryserviceV1BatchGetDefinitionsByPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_batch_get_definitions_by_post_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_batch_get_definitions_by_post_request=tableau_metricqueryservice_v1_batch_get_definitions_by_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauMetricqueryserviceV1BatchGetDefinitionsByPostResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metric_query_service_batch_get_definitions_by_post_without_preload_content(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_batch_get_definitions_by_post_request: Optional[TableauMetricqueryserviceV1BatchGetDefinitionsByPostRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets a batch of definition and metrics available on a server.

        Gets batches of definitions and metrics available on a server. Only metrics a user has privileges to view will be visible.  This endpoint uses POST as an alternative to GET, where long lists of URL parameters could be problematic.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_batch_get_definitions_by_post_request:
        :type tableau_metricqueryservice_v1_batch_get_definitions_by_post_request: TableauMetricqueryserviceV1BatchGetDefinitionsByPostRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_batch_get_definitions_by_post_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_batch_get_definitions_by_post_request=tableau_metricqueryservice_v1_batch_get_definitions_by_post_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauMetricqueryserviceV1BatchGetDefinitionsByPostResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metric_query_service_batch_get_definitions_by_post_serialize(
        self,
        x_tableau_auth,
        tableau_metricqueryservice_v1_batch_get_definitions_by_post_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter
        if tableau_metricqueryservice_v1_batch_get_definitions_by_post_request is not None:
            _body_params = tableau_metricqueryservice_v1_batch_get_definitions_by_post_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.metricqueryservice.v1.BatchGetDefinitionsByPostResponse+json', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.tableau.metricqueryservice.v1.BatchGetDefinitionsByPostRequest+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/-/pulse/definitions:batchGet',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metric_query_service_batch_get_metrics(
        self,
        enable_sorting: Optional[StrictBool] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        metric_ids: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauMetricqueryserviceV1BatchGetMetricsResponse:
        """Gets a batch of metrics available on a server.

        Gets batches of metrics available on a server. Only metrics a user has privileges to view will be visible.

        :param enable_sorting: 
        :type enable_sorting: bool
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param metric_ids: 
        :type metric_ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_batch_get_metrics_serialize(
            enable_sorting=enable_sorting,
            x_tableau_auth=x_tableau_auth,
            metric_ids=metric_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1BatchGetMetricsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metric_query_service_batch_get_metrics_with_http_info(
        self,
        enable_sorting: Optional[StrictBool] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        metric_ids: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauMetricqueryserviceV1BatchGetMetricsResponse]:
        """Gets a batch of metrics available on a server.

        Gets batches of metrics available on a server. Only metrics a user has privileges to view will be visible.

        :param enable_sorting: 
        :type enable_sorting: bool
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param metric_ids: 
        :type metric_ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_batch_get_metrics_serialize(
            enable_sorting=enable_sorting,
            x_tableau_auth=x_tableau_auth,
            metric_ids=metric_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1BatchGetMetricsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metric_query_service_batch_get_metrics_without_preload_content(
        self,
        enable_sorting: Optional[StrictBool] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        metric_ids: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets a batch of metrics available on a server.

        Gets batches of metrics available on a server. Only metrics a user has privileges to view will be visible.

        :param enable_sorting: 
        :type enable_sorting: bool
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param metric_ids: 
        :type metric_ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_batch_get_metrics_serialize(
            enable_sorting=enable_sorting,
            x_tableau_auth=x_tableau_auth,
            metric_ids=metric_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1BatchGetMetricsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metric_query_service_batch_get_metrics_serialize(
        self,
        enable_sorting,
        x_tableau_auth,
        metric_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if enable_sorting is not None:
            
            _query_params.append(('enable_sorting', enable_sorting))
            
        if metric_ids is not None:
            
            _query_params.append(('metric_ids', metric_ids))
            
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.metricqueryservice.v1.BatchGetMetricsResponse+json', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/-/pulse/metrics:batchGet',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metric_query_service_create_definition(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_create_definition_request: Optional[TableauMetricqueryserviceV1CreateDefinitionRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauMetricqueryserviceV1CreateDefinitionResponse:
        """Creates a metric definition.

        Creates a metric definition.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_create_definition_request:
        :type tableau_metricqueryservice_v1_create_definition_request: TableauMetricqueryserviceV1CreateDefinitionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_create_definition_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_create_definition_request=tableau_metricqueryservice_v1_create_definition_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauMetricqueryserviceV1CreateDefinitionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '409': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metric_query_service_create_definition_with_http_info(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_create_definition_request: Optional[TableauMetricqueryserviceV1CreateDefinitionRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauMetricqueryserviceV1CreateDefinitionResponse]:
        """Creates a metric definition.

        Creates a metric definition.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_create_definition_request:
        :type tableau_metricqueryservice_v1_create_definition_request: TableauMetricqueryserviceV1CreateDefinitionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_create_definition_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_create_definition_request=tableau_metricqueryservice_v1_create_definition_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauMetricqueryserviceV1CreateDefinitionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metric_query_service_create_definition_without_preload_content(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_create_definition_request: Optional[TableauMetricqueryserviceV1CreateDefinitionRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates a metric definition.

        Creates a metric definition.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_create_definition_request:
        :type tableau_metricqueryservice_v1_create_definition_request: TableauMetricqueryserviceV1CreateDefinitionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_create_definition_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_create_definition_request=tableau_metricqueryservice_v1_create_definition_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauMetricqueryserviceV1CreateDefinitionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metric_query_service_create_definition_serialize(
        self,
        x_tableau_auth,
        tableau_metricqueryservice_v1_create_definition_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter
        if tableau_metricqueryservice_v1_create_definition_request is not None:
            _body_params = tableau_metricqueryservice_v1_create_definition_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.metricqueryservice.v1.CreateDefinitionResponse+json', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.tableau.metricqueryservice.v1.CreateDefinitionRequest+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/-/pulse/definitions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metric_query_service_create_metric(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_create_metric_request: Optional[TableauMetricqueryserviceV1CreateMetricRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauMetricqueryserviceV1CreateMetricResponse:
        """Creates a metric.

        Creates a metric.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_create_metric_request:
        :type tableau_metricqueryservice_v1_create_metric_request: TableauMetricqueryserviceV1CreateMetricRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_create_metric_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_create_metric_request=tableau_metricqueryservice_v1_create_metric_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauMetricqueryserviceV1CreateMetricResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metric_query_service_create_metric_with_http_info(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_create_metric_request: Optional[TableauMetricqueryserviceV1CreateMetricRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauMetricqueryserviceV1CreateMetricResponse]:
        """Creates a metric.

        Creates a metric.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_create_metric_request:
        :type tableau_metricqueryservice_v1_create_metric_request: TableauMetricqueryserviceV1CreateMetricRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_create_metric_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_create_metric_request=tableau_metricqueryservice_v1_create_metric_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauMetricqueryserviceV1CreateMetricResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metric_query_service_create_metric_without_preload_content(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_create_metric_request: Optional[TableauMetricqueryserviceV1CreateMetricRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates a metric.

        Creates a metric.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_create_metric_request:
        :type tableau_metricqueryservice_v1_create_metric_request: TableauMetricqueryserviceV1CreateMetricRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_create_metric_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_create_metric_request=tableau_metricqueryservice_v1_create_metric_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauMetricqueryserviceV1CreateMetricResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metric_query_service_create_metric_serialize(
        self,
        x_tableau_auth,
        tableau_metricqueryservice_v1_create_metric_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter
        if tableau_metricqueryservice_v1_create_metric_request is not None:
            _body_params = tableau_metricqueryservice_v1_create_metric_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.metricqueryservice.v1.CreateMetricResponse+json', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.tableau.metricqueryservice.v1.CreateMetricRequest+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/-/pulse/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metric_query_service_delete_definition(
        self,
        definition_id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Deletes a metric definition.

        Deletes a metric definition.

        :param definition_id: (required)
        :type definition_id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_delete_definition_serialize(
            definition_id=definition_id,
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metric_query_service_delete_definition_with_http_info(
        self,
        definition_id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Deletes a metric definition.

        Deletes a metric definition.

        :param definition_id: (required)
        :type definition_id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_delete_definition_serialize(
            definition_id=definition_id,
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metric_query_service_delete_definition_without_preload_content(
        self,
        definition_id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deletes a metric definition.

        Deletes a metric definition.

        :param definition_id: (required)
        :type definition_id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_delete_definition_serialize(
            definition_id=definition_id,
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metric_query_service_delete_definition_serialize(
        self,
        definition_id,
        x_tableau_auth,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if definition_id is not None:
            _path_params['definition_id'] = definition_id
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/-/pulse/definitions/{definition_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metric_query_service_delete_metric(
        self,
        metric_id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Deletes a metric.

        Deletes a metric.

        :param metric_id: (required)
        :type metric_id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_delete_metric_serialize(
            metric_id=metric_id,
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metric_query_service_delete_metric_with_http_info(
        self,
        metric_id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Deletes a metric.

        Deletes a metric.

        :param metric_id: (required)
        :type metric_id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_delete_metric_serialize(
            metric_id=metric_id,
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metric_query_service_delete_metric_without_preload_content(
        self,
        metric_id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deletes a metric.

        Deletes a metric.

        :param metric_id: (required)
        :type metric_id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_delete_metric_serialize(
            metric_id=metric_id,
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metric_query_service_delete_metric_serialize(
        self,
        metric_id,
        x_tableau_auth,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if metric_id is not None:
            _path_params['metric_id'] = metric_id
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/-/pulse/metrics/{metric_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metric_query_service_get_definition(
        self,
        definition_id: StrictStr,
        view: Optional[StrictStr] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        number_of_metrics: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauMetricqueryserviceV1GetDefinitionResponse:
        """Gets a metric definition based on the specified id.

        Gets a metric definition and potentially metrics based off it based on the id.

        :param definition_id: (required)
        :type definition_id: str
        :param view: 
        :type view: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param number_of_metrics: 
        :type number_of_metrics: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_get_definition_serialize(
            definition_id=definition_id,
            view=view,
            x_tableau_auth=x_tableau_auth,
            number_of_metrics=number_of_metrics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1GetDefinitionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metric_query_service_get_definition_with_http_info(
        self,
        definition_id: StrictStr,
        view: Optional[StrictStr] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        number_of_metrics: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauMetricqueryserviceV1GetDefinitionResponse]:
        """Gets a metric definition based on the specified id.

        Gets a metric definition and potentially metrics based off it based on the id.

        :param definition_id: (required)
        :type definition_id: str
        :param view: 
        :type view: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param number_of_metrics: 
        :type number_of_metrics: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_get_definition_serialize(
            definition_id=definition_id,
            view=view,
            x_tableau_auth=x_tableau_auth,
            number_of_metrics=number_of_metrics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1GetDefinitionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metric_query_service_get_definition_without_preload_content(
        self,
        definition_id: StrictStr,
        view: Optional[StrictStr] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        number_of_metrics: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets a metric definition based on the specified id.

        Gets a metric definition and potentially metrics based off it based on the id.

        :param definition_id: (required)
        :type definition_id: str
        :param view: 
        :type view: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param number_of_metrics: 
        :type number_of_metrics: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_get_definition_serialize(
            definition_id=definition_id,
            view=view,
            x_tableau_auth=x_tableau_auth,
            number_of_metrics=number_of_metrics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1GetDefinitionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metric_query_service_get_definition_serialize(
        self,
        definition_id,
        view,
        x_tableau_auth,
        number_of_metrics,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if definition_id is not None:
            _path_params['definition_id'] = definition_id
        # process the query parameters
        if view is not None:
            
            _query_params.append(('view', view))
            
        if number_of_metrics is not None:
            
            _query_params.append(('number_of_metrics', number_of_metrics))
            
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.metricqueryservice.v1.GetDefinitionResponse+json', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/-/pulse/definitions/{definition_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metric_query_service_get_metric(
        self,
        metric_id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauMetricqueryserviceV1GetMetricResponse:
        """Gets the metric by ID.

        Gets the metric by its ID. User must have privileges to view the requested metric.

        :param metric_id: (required)
        :type metric_id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_get_metric_serialize(
            metric_id=metric_id,
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1GetMetricResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metric_query_service_get_metric_with_http_info(
        self,
        metric_id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauMetricqueryserviceV1GetMetricResponse]:
        """Gets the metric by ID.

        Gets the metric by its ID. User must have privileges to view the requested metric.

        :param metric_id: (required)
        :type metric_id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_get_metric_serialize(
            metric_id=metric_id,
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1GetMetricResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metric_query_service_get_metric_without_preload_content(
        self,
        metric_id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets the metric by ID.

        Gets the metric by its ID. User must have privileges to view the requested metric.

        :param metric_id: (required)
        :type metric_id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_get_metric_serialize(
            metric_id=metric_id,
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1GetMetricResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metric_query_service_get_metric_serialize(
        self,
        metric_id,
        x_tableau_auth,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if metric_id is not None:
            _path_params['metric_id'] = metric_id
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.metricqueryservice.v1.GetMetricResponse+json', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/-/pulse/metrics/{metric_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metric_query_service_get_or_create_metric(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_get_or_create_metric_request: Optional[TableauMetricqueryserviceV1GetOrCreateMetricRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauMetricqueryserviceV1GetOrCreateMetricResponse:
        """Creates a metric and returns boolean indicating whether the new metric was created or not.

        Creates a metric and returns boolean indicating whether the new metric was created or not.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_get_or_create_metric_request:
        :type tableau_metricqueryservice_v1_get_or_create_metric_request: TableauMetricqueryserviceV1GetOrCreateMetricRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_get_or_create_metric_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_get_or_create_metric_request=tableau_metricqueryservice_v1_get_or_create_metric_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauMetricqueryserviceV1GetOrCreateMetricResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metric_query_service_get_or_create_metric_with_http_info(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_get_or_create_metric_request: Optional[TableauMetricqueryserviceV1GetOrCreateMetricRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauMetricqueryserviceV1GetOrCreateMetricResponse]:
        """Creates a metric and returns boolean indicating whether the new metric was created or not.

        Creates a metric and returns boolean indicating whether the new metric was created or not.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_get_or_create_metric_request:
        :type tableau_metricqueryservice_v1_get_or_create_metric_request: TableauMetricqueryserviceV1GetOrCreateMetricRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_get_or_create_metric_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_get_or_create_metric_request=tableau_metricqueryservice_v1_get_or_create_metric_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauMetricqueryserviceV1GetOrCreateMetricResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metric_query_service_get_or_create_metric_without_preload_content(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_get_or_create_metric_request: Optional[TableauMetricqueryserviceV1GetOrCreateMetricRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates a metric and returns boolean indicating whether the new metric was created or not.

        Creates a metric and returns boolean indicating whether the new metric was created or not.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_get_or_create_metric_request:
        :type tableau_metricqueryservice_v1_get_or_create_metric_request: TableauMetricqueryserviceV1GetOrCreateMetricRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_get_or_create_metric_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_get_or_create_metric_request=tableau_metricqueryservice_v1_get_or_create_metric_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauMetricqueryserviceV1GetOrCreateMetricResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metric_query_service_get_or_create_metric_serialize(
        self,
        x_tableau_auth,
        tableau_metricqueryservice_v1_get_or_create_metric_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter
        if tableau_metricqueryservice_v1_get_or_create_metric_request is not None:
            _body_params = tableau_metricqueryservice_v1_get_or_create_metric_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.metricqueryservice.v1.GetOrCreateMetricResponse+json', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.tableau.metricqueryservice.v1.GetOrCreateMetricRequest+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/-/pulse/metrics:getOrCreate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metric_query_service_list_definitions(
        self,
        enable_sorting: Optional[StrictBool] = None,
        order_by: Optional[StrictStr] = None,
        view: Optional[StrictStr] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results in a paged response.   Example:   > `GET ...//definitions?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        exclude_metrics_without_followers: Optional[StrictBool] = None,
        filter: Optional[StrictStr] = None,
        metric_id: Optional[StrictStr] = None,
        number_of_metrics: Optional[StrictInt] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//definitions?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauMetricqueryserviceV1ListDefinitionsResponse:
        """Lists the definitions available on a server.

        Lists the definitions and metrics available on a server. Only definitions a user has privileges to view will be visible.

        :param enable_sorting: 
        :type enable_sorting: bool
        :param order_by: 
        :type order_by: str
        :param view: 
        :type view: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param page_size: Specifies the number of results in a paged response.   Example:   > `GET ...//definitions?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_size: int
        :param exclude_metrics_without_followers: 
        :type exclude_metrics_without_followers: bool
        :param filter: 
        :type filter: str
        :param metric_id: 
        :type metric_id: str
        :param number_of_metrics: 
        :type number_of_metrics: int
        :param page_token: Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//definitions?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_list_definitions_serialize(
            enable_sorting=enable_sorting,
            order_by=order_by,
            view=view,
            x_tableau_auth=x_tableau_auth,
            page_size=page_size,
            exclude_metrics_without_followers=exclude_metrics_without_followers,
            filter=filter,
            metric_id=metric_id,
            number_of_metrics=number_of_metrics,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1ListDefinitionsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metric_query_service_list_definitions_with_http_info(
        self,
        enable_sorting: Optional[StrictBool] = None,
        order_by: Optional[StrictStr] = None,
        view: Optional[StrictStr] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results in a paged response.   Example:   > `GET ...//definitions?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        exclude_metrics_without_followers: Optional[StrictBool] = None,
        filter: Optional[StrictStr] = None,
        metric_id: Optional[StrictStr] = None,
        number_of_metrics: Optional[StrictInt] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//definitions?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauMetricqueryserviceV1ListDefinitionsResponse]:
        """Lists the definitions available on a server.

        Lists the definitions and metrics available on a server. Only definitions a user has privileges to view will be visible.

        :param enable_sorting: 
        :type enable_sorting: bool
        :param order_by: 
        :type order_by: str
        :param view: 
        :type view: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param page_size: Specifies the number of results in a paged response.   Example:   > `GET ...//definitions?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_size: int
        :param exclude_metrics_without_followers: 
        :type exclude_metrics_without_followers: bool
        :param filter: 
        :type filter: str
        :param metric_id: 
        :type metric_id: str
        :param number_of_metrics: 
        :type number_of_metrics: int
        :param page_token: Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//definitions?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_list_definitions_serialize(
            enable_sorting=enable_sorting,
            order_by=order_by,
            view=view,
            x_tableau_auth=x_tableau_auth,
            page_size=page_size,
            exclude_metrics_without_followers=exclude_metrics_without_followers,
            filter=filter,
            metric_id=metric_id,
            number_of_metrics=number_of_metrics,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1ListDefinitionsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metric_query_service_list_definitions_without_preload_content(
        self,
        enable_sorting: Optional[StrictBool] = None,
        order_by: Optional[StrictStr] = None,
        view: Optional[StrictStr] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results in a paged response.   Example:   > `GET ...//definitions?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        exclude_metrics_without_followers: Optional[StrictBool] = None,
        filter: Optional[StrictStr] = None,
        metric_id: Optional[StrictStr] = None,
        number_of_metrics: Optional[StrictInt] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//definitions?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Lists the definitions available on a server.

        Lists the definitions and metrics available on a server. Only definitions a user has privileges to view will be visible.

        :param enable_sorting: 
        :type enable_sorting: bool
        :param order_by: 
        :type order_by: str
        :param view: 
        :type view: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param page_size: Specifies the number of results in a paged response.   Example:   > `GET ...//definitions?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_size: int
        :param exclude_metrics_without_followers: 
        :type exclude_metrics_without_followers: bool
        :param filter: 
        :type filter: str
        :param metric_id: 
        :type metric_id: str
        :param number_of_metrics: 
        :type number_of_metrics: int
        :param page_token: Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//definitions?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_list_definitions_serialize(
            enable_sorting=enable_sorting,
            order_by=order_by,
            view=view,
            x_tableau_auth=x_tableau_auth,
            page_size=page_size,
            exclude_metrics_without_followers=exclude_metrics_without_followers,
            filter=filter,
            metric_id=metric_id,
            number_of_metrics=number_of_metrics,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1ListDefinitionsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metric_query_service_list_definitions_serialize(
        self,
        enable_sorting,
        order_by,
        view,
        x_tableau_auth,
        page_size,
        exclude_metrics_without_followers,
        filter,
        metric_id,
        number_of_metrics,
        page_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if enable_sorting is not None:
            
            _query_params.append(('enable_sorting', enable_sorting))
            
        if order_by is not None:
            
            _query_params.append(('order_by', order_by))
            
        if view is not None:
            
            _query_params.append(('view', view))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if exclude_metrics_without_followers is not None:
            
            _query_params.append(('exclude_metrics_without_followers', exclude_metrics_without_followers))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if metric_id is not None:
            
            _query_params.append(('metric_id', metric_id))
            
        if number_of_metrics is not None:
            
            _query_params.append(('number_of_metrics', number_of_metrics))
            
        if page_token is not None:
            
            _query_params.append(('page_token', page_token))
            
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.metricqueryservice.v1.ListDefinitionsResponse+json', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/-/pulse/definitions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metric_query_service_list_metrics(
        self,
        definition_id: StrictStr,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results in a paged response.   Example:   > `GET ...//definitions/{definition_id}/metrics?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//definitions/{definition_id}/metrics?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        enable_sorting: Optional[StrictBool] = None,
        order_by: Optional[StrictStr] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        exclude_metrics_without_followers: Optional[StrictBool] = None,
        filter: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauMetricqueryserviceV1ListMetricsResponse:
        """Lists the metrics available on a server.

        Lists the metrics based on a metric definition. Only metrics a user has privileges to view will be visible.

        :param definition_id: (required)
        :type definition_id: str
        :param page_size: Specifies the number of results in a paged response.   Example:   > `GET ...//definitions/{definition_id}/metrics?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_size: int
        :param page_token: Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//definitions/{definition_id}/metrics?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_token: str
        :param enable_sorting: 
        :type enable_sorting: bool
        :param order_by: 
        :type order_by: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param exclude_metrics_without_followers: 
        :type exclude_metrics_without_followers: bool
        :param filter: 
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_list_metrics_serialize(
            definition_id=definition_id,
            page_size=page_size,
            page_token=page_token,
            enable_sorting=enable_sorting,
            order_by=order_by,
            x_tableau_auth=x_tableau_auth,
            exclude_metrics_without_followers=exclude_metrics_without_followers,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1ListMetricsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metric_query_service_list_metrics_with_http_info(
        self,
        definition_id: StrictStr,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results in a paged response.   Example:   > `GET ...//definitions/{definition_id}/metrics?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//definitions/{definition_id}/metrics?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        enable_sorting: Optional[StrictBool] = None,
        order_by: Optional[StrictStr] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        exclude_metrics_without_followers: Optional[StrictBool] = None,
        filter: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauMetricqueryserviceV1ListMetricsResponse]:
        """Lists the metrics available on a server.

        Lists the metrics based on a metric definition. Only metrics a user has privileges to view will be visible.

        :param definition_id: (required)
        :type definition_id: str
        :param page_size: Specifies the number of results in a paged response.   Example:   > `GET ...//definitions/{definition_id}/metrics?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_size: int
        :param page_token: Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//definitions/{definition_id}/metrics?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_token: str
        :param enable_sorting: 
        :type enable_sorting: bool
        :param order_by: 
        :type order_by: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param exclude_metrics_without_followers: 
        :type exclude_metrics_without_followers: bool
        :param filter: 
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_list_metrics_serialize(
            definition_id=definition_id,
            page_size=page_size,
            page_token=page_token,
            enable_sorting=enable_sorting,
            order_by=order_by,
            x_tableau_auth=x_tableau_auth,
            exclude_metrics_without_followers=exclude_metrics_without_followers,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1ListMetricsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metric_query_service_list_metrics_without_preload_content(
        self,
        definition_id: StrictStr,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results in a paged response.   Example:   > `GET ...//definitions/{definition_id}/metrics?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//definitions/{definition_id}/metrics?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        enable_sorting: Optional[StrictBool] = None,
        order_by: Optional[StrictStr] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        exclude_metrics_without_followers: Optional[StrictBool] = None,
        filter: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Lists the metrics available on a server.

        Lists the metrics based on a metric definition. Only metrics a user has privileges to view will be visible.

        :param definition_id: (required)
        :type definition_id: str
        :param page_size: Specifies the number of results in a paged response.   Example:   > `GET ...//definitions/{definition_id}/metrics?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_size: int
        :param page_token: Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//definitions/{definition_id}/metrics?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_token: str
        :param enable_sorting: 
        :type enable_sorting: bool
        :param order_by: 
        :type order_by: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param exclude_metrics_without_followers: 
        :type exclude_metrics_without_followers: bool
        :param filter: 
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_list_metrics_serialize(
            definition_id=definition_id,
            page_size=page_size,
            page_token=page_token,
            enable_sorting=enable_sorting,
            order_by=order_by,
            x_tableau_auth=x_tableau_auth,
            exclude_metrics_without_followers=exclude_metrics_without_followers,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1ListMetricsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metric_query_service_list_metrics_serialize(
        self,
        definition_id,
        page_size,
        page_token,
        enable_sorting,
        order_by,
        x_tableau_auth,
        exclude_metrics_without_followers,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if definition_id is not None:
            _path_params['definition_id'] = definition_id
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if page_token is not None:
            
            _query_params.append(('page_token', page_token))
            
        if enable_sorting is not None:
            
            _query_params.append(('enable_sorting', enable_sorting))
            
        if order_by is not None:
            
            _query_params.append(('order_by', order_by))
            
        if exclude_metrics_without_followers is not None:
            
            _query_params.append(('exclude_metrics_without_followers', exclude_metrics_without_followers))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.metricqueryservice.v1.ListMetricsResponse+json', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/-/pulse/definitions/{definition_id}/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metric_query_service_update_definition(
        self,
        definition_id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_update_definition_request: Optional[TableauMetricqueryserviceV1UpdateDefinitionRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauMetricqueryserviceV1UpdateDefinitionResponse:
        """Updates a metric definition.

        Updates a metric definition.

        :param definition_id: (required)
        :type definition_id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_update_definition_request:
        :type tableau_metricqueryservice_v1_update_definition_request: TableauMetricqueryserviceV1UpdateDefinitionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_update_definition_serialize(
            definition_id=definition_id,
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_update_definition_request=tableau_metricqueryservice_v1_update_definition_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1UpdateDefinitionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metric_query_service_update_definition_with_http_info(
        self,
        definition_id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_update_definition_request: Optional[TableauMetricqueryserviceV1UpdateDefinitionRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauMetricqueryserviceV1UpdateDefinitionResponse]:
        """Updates a metric definition.

        Updates a metric definition.

        :param definition_id: (required)
        :type definition_id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_update_definition_request:
        :type tableau_metricqueryservice_v1_update_definition_request: TableauMetricqueryserviceV1UpdateDefinitionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_update_definition_serialize(
            definition_id=definition_id,
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_update_definition_request=tableau_metricqueryservice_v1_update_definition_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1UpdateDefinitionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metric_query_service_update_definition_without_preload_content(
        self,
        definition_id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_update_definition_request: Optional[TableauMetricqueryserviceV1UpdateDefinitionRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Updates a metric definition.

        Updates a metric definition.

        :param definition_id: (required)
        :type definition_id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_update_definition_request:
        :type tableau_metricqueryservice_v1_update_definition_request: TableauMetricqueryserviceV1UpdateDefinitionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_update_definition_serialize(
            definition_id=definition_id,
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_update_definition_request=tableau_metricqueryservice_v1_update_definition_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1UpdateDefinitionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metric_query_service_update_definition_serialize(
        self,
        definition_id,
        x_tableau_auth,
        tableau_metricqueryservice_v1_update_definition_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if definition_id is not None:
            _path_params['definition_id'] = definition_id
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter
        if tableau_metricqueryservice_v1_update_definition_request is not None:
            _body_params = tableau_metricqueryservice_v1_update_definition_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.metricqueryservice.v1.UpdateDefinitionResponse+json', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.tableau.metricqueryservice.v1.UpdateDefinitionRequest+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/-/pulse/definitions/{definition_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metric_query_service_update_metric(
        self,
        metric_id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_update_metric_request: Optional[TableauMetricqueryserviceV1UpdateMetricRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauMetricqueryserviceV1UpdateMetricResponse:
        """Updates a metric.

        Updates a metric.

        :param metric_id: (required)
        :type metric_id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_update_metric_request:
        :type tableau_metricqueryservice_v1_update_metric_request: TableauMetricqueryserviceV1UpdateMetricRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_update_metric_serialize(
            metric_id=metric_id,
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_update_metric_request=tableau_metricqueryservice_v1_update_metric_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1UpdateMetricResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metric_query_service_update_metric_with_http_info(
        self,
        metric_id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_update_metric_request: Optional[TableauMetricqueryserviceV1UpdateMetricRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauMetricqueryserviceV1UpdateMetricResponse]:
        """Updates a metric.

        Updates a metric.

        :param metric_id: (required)
        :type metric_id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_update_metric_request:
        :type tableau_metricqueryservice_v1_update_metric_request: TableauMetricqueryserviceV1UpdateMetricRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_update_metric_serialize(
            metric_id=metric_id,
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_update_metric_request=tableau_metricqueryservice_v1_update_metric_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1UpdateMetricResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metric_query_service_update_metric_without_preload_content(
        self,
        metric_id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_metricqueryservice_v1_update_metric_request: Optional[TableauMetricqueryserviceV1UpdateMetricRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Updates a metric.

        Updates a metric.

        :param metric_id: (required)
        :type metric_id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_metricqueryservice_v1_update_metric_request:
        :type tableau_metricqueryservice_v1_update_metric_request: TableauMetricqueryserviceV1UpdateMetricRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metric_query_service_update_metric_serialize(
            metric_id=metric_id,
            x_tableau_auth=x_tableau_auth,
            tableau_metricqueryservice_v1_update_metric_request=tableau_metricqueryservice_v1_update_metric_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauMetricqueryserviceV1UpdateMetricResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metric_query_service_update_metric_serialize(
        self,
        metric_id,
        x_tableau_auth,
        tableau_metricqueryservice_v1_update_metric_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if metric_id is not None:
            _path_params['metric_id'] = metric_id
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter
        if tableau_metricqueryservice_v1_update_metric_request is not None:
            _body_params = tableau_metricqueryservice_v1_update_metric_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.metricqueryservice.v1.UpdateMetricResponse+json', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.tableau.metricqueryservice.v1.UpdateMetricRequest+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/-/pulse/metrics/{metric_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pulse_subscription_service_list_followed_metrics_groups(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        sort_order: Optional[StrictStr] = None,
        group_by: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauPulseSubscriptionserviceV1ListFollowedMetricsGroupsResponse:
        """List followed metrics groups

        Gets the user's followed metrics. Optionally metrics can be grouped by characteristics like datasource, and sorted. If no grouping and sorting is specified then returns are grouped and sorted by existing user preferences. If no user preferences exist or are specified, then metrics are grouped by most recently followed, in descending order. If metrics are grouped by most recently followed then they are returned in a single group, that is sorted by the specified, existing, or default order.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param sort_order: 
        :type sort_order: str
        :param group_by: 
        :type group_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_list_followed_metrics_groups_serialize(
            x_tableau_auth=x_tableau_auth,
            sort_order=sort_order,
            group_by=group_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1ListFollowedMetricsGroupsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pulse_subscription_service_list_followed_metrics_groups_with_http_info(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        sort_order: Optional[StrictStr] = None,
        group_by: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauPulseSubscriptionserviceV1ListFollowedMetricsGroupsResponse]:
        """List followed metrics groups

        Gets the user's followed metrics. Optionally metrics can be grouped by characteristics like datasource, and sorted. If no grouping and sorting is specified then returns are grouped and sorted by existing user preferences. If no user preferences exist or are specified, then metrics are grouped by most recently followed, in descending order. If metrics are grouped by most recently followed then they are returned in a single group, that is sorted by the specified, existing, or default order.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param sort_order: 
        :type sort_order: str
        :param group_by: 
        :type group_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_list_followed_metrics_groups_serialize(
            x_tableau_auth=x_tableau_auth,
            sort_order=sort_order,
            group_by=group_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1ListFollowedMetricsGroupsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pulse_subscription_service_list_followed_metrics_groups_without_preload_content(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        sort_order: Optional[StrictStr] = None,
        group_by: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List followed metrics groups

        Gets the user's followed metrics. Optionally metrics can be grouped by characteristics like datasource, and sorted. If no grouping and sorting is specified then returns are grouped and sorted by existing user preferences. If no user preferences exist or are specified, then metrics are grouped by most recently followed, in descending order. If metrics are grouped by most recently followed then they are returned in a single group, that is sorted by the specified, existing, or default order.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param sort_order: 
        :type sort_order: str
        :param group_by: 
        :type group_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_list_followed_metrics_groups_serialize(
            x_tableau_auth=x_tableau_auth,
            sort_order=sort_order,
            group_by=group_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1ListFollowedMetricsGroupsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pulse_subscription_service_list_followed_metrics_groups_serialize(
        self,
        x_tableau_auth,
        sort_order,
        group_by,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if group_by is not None:
            
            _query_params.append(('group_by', group_by))
            
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.pulse.subscriptionservice.v1.ListFollowedMetricsGroupsResponse+json', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/-/pulse/metrics:followedMetricsGroups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


