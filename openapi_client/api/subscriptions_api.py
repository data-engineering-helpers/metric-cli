# coding: utf-8

"""
    Tableau Services APIs

    Open API specification for Tableau Services APIs

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request import TableauPulseSubscriptionserviceV1BatchCreateSubscriptionsRequest
from openapi_client.models.tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_response import TableauPulseSubscriptionserviceV1BatchCreateSubscriptionsResponse
from openapi_client.models.tableau_pulse_subscriptionservice_v1_batch_get_metric_follower_counts_response import TableauPulseSubscriptionserviceV1BatchGetMetricFollowerCountsResponse
from openapi_client.models.tableau_pulse_subscriptionservice_v1_batch_get_subscriptions_response import TableauPulseSubscriptionserviceV1BatchGetSubscriptionsResponse
from openapi_client.models.tableau_pulse_subscriptionservice_v1_create_subscription_request import TableauPulseSubscriptionserviceV1CreateSubscriptionRequest
from openapi_client.models.tableau_pulse_subscriptionservice_v1_create_subscription_response import TableauPulseSubscriptionserviceV1CreateSubscriptionResponse
from openapi_client.models.tableau_pulse_subscriptionservice_v1_get_subscription_response import TableauPulseSubscriptionserviceV1GetSubscriptionResponse
from openapi_client.models.tableau_pulse_subscriptionservice_v1_get_user_digest_preferences_response import TableauPulseSubscriptionserviceV1GetUserDigestPreferencesResponse
from openapi_client.models.tableau_pulse_subscriptionservice_v1_get_user_preferences_response import TableauPulseSubscriptionserviceV1GetUserPreferencesResponse
from openapi_client.models.tableau_pulse_subscriptionservice_v1_list_subscriptions_response import TableauPulseSubscriptionserviceV1ListSubscriptionsResponse
from openapi_client.models.tableau_pulse_subscriptionservice_v1_update_subscription_request import TableauPulseSubscriptionserviceV1UpdateSubscriptionRequest
from openapi_client.models.tableau_pulse_subscriptionservice_v1_update_subscription_response import TableauPulseSubscriptionserviceV1UpdateSubscriptionResponse
from openapi_client.models.tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request import TableauPulseSubscriptionserviceV1UpdateUserDigestPreferencesRequest
from openapi_client.models.tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_response import TableauPulseSubscriptionserviceV1UpdateUserDigestPreferencesResponse
from openapi_client.models.tableau_pulse_subscriptionservice_v1_update_user_preferences_request import TableauPulseSubscriptionserviceV1UpdateUserPreferencesRequest
from openapi_client.models.tableau_pulse_subscriptionservice_v1_update_user_preferences_response import TableauPulseSubscriptionserviceV1UpdateUserPreferencesResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class SubscriptionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def pulse_subscription_service_batch_create_subscriptions(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request: Optional[TableauPulseSubscriptionserviceV1BatchCreateSubscriptionsRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauPulseSubscriptionserviceV1BatchCreateSubscriptionsResponse:
        """Creates multiple subscriptions.

        Creates multiple subscriptions.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request:
        :type tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request: TableauPulseSubscriptionserviceV1BatchCreateSubscriptionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_batch_create_subscriptions_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request=tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauPulseSubscriptionserviceV1BatchCreateSubscriptionsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pulse_subscription_service_batch_create_subscriptions_with_http_info(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request: Optional[TableauPulseSubscriptionserviceV1BatchCreateSubscriptionsRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauPulseSubscriptionserviceV1BatchCreateSubscriptionsResponse]:
        """Creates multiple subscriptions.

        Creates multiple subscriptions.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request:
        :type tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request: TableauPulseSubscriptionserviceV1BatchCreateSubscriptionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_batch_create_subscriptions_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request=tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauPulseSubscriptionserviceV1BatchCreateSubscriptionsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pulse_subscription_service_batch_create_subscriptions_without_preload_content(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request: Optional[TableauPulseSubscriptionserviceV1BatchCreateSubscriptionsRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates multiple subscriptions.

        Creates multiple subscriptions.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request:
        :type tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request: TableauPulseSubscriptionserviceV1BatchCreateSubscriptionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_batch_create_subscriptions_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request=tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauPulseSubscriptionserviceV1BatchCreateSubscriptionsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pulse_subscription_service_batch_create_subscriptions_serialize(
        self,
        x_tableau_auth,
        tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter
        if tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request is not None:
            _body_params = tableau_pulse_subscriptionservice_v1_batch_create_subscriptions_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.pulse.subscriptionservice.v1.BatchCreateSubscriptionsResponse+json', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.tableau.pulse.subscriptionservice.v1.BatchCreateSubscriptionsRequest+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/-/pulse/subscriptions:batchCreate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pulse_subscription_service_batch_get_metric_follower_counts(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        metric_ids: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauPulseSubscriptionserviceV1BatchGetMetricFollowerCountsResponse:
        """Gets the total number of unique followers per metric

        Calculates the number of unique followers for list of metrics. For metrics that have group followers the count will be the union of all the members of the subscribed groups plus all the individual followers.  Users are counted only once per metric.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param metric_ids: 
        :type metric_ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_batch_get_metric_follower_counts_serialize(
            x_tableau_auth=x_tableau_auth,
            metric_ids=metric_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1BatchGetMetricFollowerCountsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pulse_subscription_service_batch_get_metric_follower_counts_with_http_info(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        metric_ids: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauPulseSubscriptionserviceV1BatchGetMetricFollowerCountsResponse]:
        """Gets the total number of unique followers per metric

        Calculates the number of unique followers for list of metrics. For metrics that have group followers the count will be the union of all the members of the subscribed groups plus all the individual followers.  Users are counted only once per metric.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param metric_ids: 
        :type metric_ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_batch_get_metric_follower_counts_serialize(
            x_tableau_auth=x_tableau_auth,
            metric_ids=metric_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1BatchGetMetricFollowerCountsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pulse_subscription_service_batch_get_metric_follower_counts_without_preload_content(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        metric_ids: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets the total number of unique followers per metric

        Calculates the number of unique followers for list of metrics. For metrics that have group followers the count will be the union of all the members of the subscribed groups plus all the individual followers.  Users are counted only once per metric.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param metric_ids: 
        :type metric_ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_batch_get_metric_follower_counts_serialize(
            x_tableau_auth=x_tableau_auth,
            metric_ids=metric_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1BatchGetMetricFollowerCountsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pulse_subscription_service_batch_get_metric_follower_counts_serialize(
        self,
        x_tableau_auth,
        metric_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if metric_ids is not None:
            
            _query_params.append(('metric_ids', metric_ids))
            
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.pulse.subscriptionservice.v1.BatchGetMetricFollowerCountsResponse+json', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/-/pulse/subscriptions:batchGetMetricFollowerCounts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pulse_subscription_service_batch_get_subscriptions(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauPulseSubscriptionserviceV1BatchGetSubscriptionsResponse:
        """Gets a batch of subscriptions available on a server.

        Gets batches of subscriptions available on a server. Only subscriptions a user has privileges to view will be visible.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_batch_get_subscriptions_serialize(
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1BatchGetSubscriptionsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pulse_subscription_service_batch_get_subscriptions_with_http_info(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauPulseSubscriptionserviceV1BatchGetSubscriptionsResponse]:
        """Gets a batch of subscriptions available on a server.

        Gets batches of subscriptions available on a server. Only subscriptions a user has privileges to view will be visible.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_batch_get_subscriptions_serialize(
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1BatchGetSubscriptionsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pulse_subscription_service_batch_get_subscriptions_without_preload_content(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets a batch of subscriptions available on a server.

        Gets batches of subscriptions available on a server. Only subscriptions a user has privileges to view will be visible.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_batch_get_subscriptions_serialize(
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1BatchGetSubscriptionsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pulse_subscription_service_batch_get_subscriptions_serialize(
        self,
        x_tableau_auth,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.pulse.subscriptionservice.v1.BatchGetSubscriptionsResponse+json', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/-/pulse/subscriptions:batchGet',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pulse_subscription_service_create_subscription(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_pulse_subscriptionservice_v1_create_subscription_request: Optional[TableauPulseSubscriptionserviceV1CreateSubscriptionRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauPulseSubscriptionserviceV1CreateSubscriptionResponse:
        """Creates a subscription.

        Creates a subscription.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_pulse_subscriptionservice_v1_create_subscription_request:
        :type tableau_pulse_subscriptionservice_v1_create_subscription_request: TableauPulseSubscriptionserviceV1CreateSubscriptionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_create_subscription_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_pulse_subscriptionservice_v1_create_subscription_request=tableau_pulse_subscriptionservice_v1_create_subscription_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauPulseSubscriptionserviceV1CreateSubscriptionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pulse_subscription_service_create_subscription_with_http_info(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_pulse_subscriptionservice_v1_create_subscription_request: Optional[TableauPulseSubscriptionserviceV1CreateSubscriptionRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauPulseSubscriptionserviceV1CreateSubscriptionResponse]:
        """Creates a subscription.

        Creates a subscription.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_pulse_subscriptionservice_v1_create_subscription_request:
        :type tableau_pulse_subscriptionservice_v1_create_subscription_request: TableauPulseSubscriptionserviceV1CreateSubscriptionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_create_subscription_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_pulse_subscriptionservice_v1_create_subscription_request=tableau_pulse_subscriptionservice_v1_create_subscription_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauPulseSubscriptionserviceV1CreateSubscriptionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pulse_subscription_service_create_subscription_without_preload_content(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_pulse_subscriptionservice_v1_create_subscription_request: Optional[TableauPulseSubscriptionserviceV1CreateSubscriptionRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates a subscription.

        Creates a subscription.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_pulse_subscriptionservice_v1_create_subscription_request:
        :type tableau_pulse_subscriptionservice_v1_create_subscription_request: TableauPulseSubscriptionserviceV1CreateSubscriptionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_create_subscription_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_pulse_subscriptionservice_v1_create_subscription_request=tableau_pulse_subscriptionservice_v1_create_subscription_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TableauPulseSubscriptionserviceV1CreateSubscriptionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pulse_subscription_service_create_subscription_serialize(
        self,
        x_tableau_auth,
        tableau_pulse_subscriptionservice_v1_create_subscription_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter
        if tableau_pulse_subscriptionservice_v1_create_subscription_request is not None:
            _body_params = tableau_pulse_subscriptionservice_v1_create_subscription_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.pulse.subscriptionservice.v1.CreateSubscriptionResponse+json', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.tableau.pulse.subscriptionservice.v1.CreateSubscriptionRequest+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/-/pulse/subscriptions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pulse_subscription_service_delete_subscription(
        self,
        id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Deletes a subscription.

        Deletes a subscription.

        :param id: (required)
        :type id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_delete_subscription_serialize(
            id=id,
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pulse_subscription_service_delete_subscription_with_http_info(
        self,
        id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Deletes a subscription.

        Deletes a subscription.

        :param id: (required)
        :type id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_delete_subscription_serialize(
            id=id,
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pulse_subscription_service_delete_subscription_without_preload_content(
        self,
        id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deletes a subscription.

        Deletes a subscription.

        :param id: (required)
        :type id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_delete_subscription_serialize(
            id=id,
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pulse_subscription_service_delete_subscription_serialize(
        self,
        id,
        x_tableau_auth,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/-/pulse/subscriptions/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pulse_subscription_service_get_subscription(
        self,
        id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauPulseSubscriptionserviceV1GetSubscriptionResponse:
        """Gets a subscription based on the specified id.

        Gets a subscription.

        :param id: (required)
        :type id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_get_subscription_serialize(
            id=id,
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1GetSubscriptionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pulse_subscription_service_get_subscription_with_http_info(
        self,
        id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauPulseSubscriptionserviceV1GetSubscriptionResponse]:
        """Gets a subscription based on the specified id.

        Gets a subscription.

        :param id: (required)
        :type id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_get_subscription_serialize(
            id=id,
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1GetSubscriptionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pulse_subscription_service_get_subscription_without_preload_content(
        self,
        id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets a subscription based on the specified id.

        Gets a subscription.

        :param id: (required)
        :type id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_get_subscription_serialize(
            id=id,
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1GetSubscriptionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pulse_subscription_service_get_subscription_serialize(
        self,
        id,
        x_tableau_auth,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.pulse.subscriptionservice.v1.GetSubscriptionResponse+json', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/-/pulse/subscriptions/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pulse_subscription_service_get_user_digest_preferences(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauPulseSubscriptionserviceV1GetUserDigestPreferencesResponse:
        """Get user digest preferences

        Gets the user's digest preferences for which delivery channels to receive notifications on, and at what cadence.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_get_user_digest_preferences_serialize(
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1GetUserDigestPreferencesResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pulse_subscription_service_get_user_digest_preferences_with_http_info(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauPulseSubscriptionserviceV1GetUserDigestPreferencesResponse]:
        """Get user digest preferences

        Gets the user's digest preferences for which delivery channels to receive notifications on, and at what cadence.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_get_user_digest_preferences_serialize(
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1GetUserDigestPreferencesResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pulse_subscription_service_get_user_digest_preferences_without_preload_content(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get user digest preferences

        Gets the user's digest preferences for which delivery channels to receive notifications on, and at what cadence.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_get_user_digest_preferences_serialize(
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1GetUserDigestPreferencesResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pulse_subscription_service_get_user_digest_preferences_serialize(
        self,
        x_tableau_auth,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.pulse.subscriptionservice.v1.GetUserDigestPreferencesResponse+json', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/-/pulse/user/digestpreferences',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pulse_subscription_service_get_user_preferences(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauPulseSubscriptionserviceV1GetUserPreferencesResponse:
        """Get user preferences

        Gets the user's preferences for notifications channels and cadence, and for grouping and sorting followed metrics in REST responses and UI.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_get_user_preferences_serialize(
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1GetUserPreferencesResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pulse_subscription_service_get_user_preferences_with_http_info(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauPulseSubscriptionserviceV1GetUserPreferencesResponse]:
        """Get user preferences

        Gets the user's preferences for notifications channels and cadence, and for grouping and sorting followed metrics in REST responses and UI.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_get_user_preferences_serialize(
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1GetUserPreferencesResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pulse_subscription_service_get_user_preferences_without_preload_content(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get user preferences

        Gets the user's preferences for notifications channels and cadence, and for grouping and sorting followed metrics in REST responses and UI.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_get_user_preferences_serialize(
            x_tableau_auth=x_tableau_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1GetUserPreferencesResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pulse_subscription_service_get_user_preferences_serialize(
        self,
        x_tableau_auth,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.pulse.subscriptionservice.v1.GetUserPreferencesResponse+json', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/-/pulse/user/preferences',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pulse_subscription_service_list_subscriptions(
        self,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//subscriptions?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        user_id: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results in a paged response.   Example:   > `GET ...//subscriptions?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        metric_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauPulseSubscriptionserviceV1ListSubscriptionsResponse:
        """Lists the subscriptions available on a server.

        Lists the subscriptions available on a server. Only subscriptions a user has privileges to view will be visible.

        :param page_token: Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//subscriptions?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_token: str
        :param user_id: 
        :type user_id: str
        :param page_size: Specifies the number of results in a paged response.   Example:   > `GET ...//subscriptions?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_size: int
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param metric_id: 
        :type metric_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_list_subscriptions_serialize(
            page_token=page_token,
            user_id=user_id,
            page_size=page_size,
            x_tableau_auth=x_tableau_auth,
            metric_id=metric_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1ListSubscriptionsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pulse_subscription_service_list_subscriptions_with_http_info(
        self,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//subscriptions?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        user_id: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results in a paged response.   Example:   > `GET ...//subscriptions?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        metric_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauPulseSubscriptionserviceV1ListSubscriptionsResponse]:
        """Lists the subscriptions available on a server.

        Lists the subscriptions available on a server. Only subscriptions a user has privileges to view will be visible.

        :param page_token: Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//subscriptions?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_token: str
        :param user_id: 
        :type user_id: str
        :param page_size: Specifies the number of results in a paged response.   Example:   > `GET ...//subscriptions?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_size: int
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param metric_id: 
        :type metric_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_list_subscriptions_serialize(
            page_token=page_token,
            user_id=user_id,
            page_size=page_size,
            x_tableau_auth=x_tableau_auth,
            metric_id=metric_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1ListSubscriptionsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pulse_subscription_service_list_subscriptions_without_preload_content(
        self,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//subscriptions?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        user_id: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results in a paged response.   Example:   > `GET ...//subscriptions?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.")] = None,
        x_tableau_auth: Optional[StrictStr] = None,
        metric_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Lists the subscriptions available on a server.

        Lists the subscriptions available on a server. Only subscriptions a user has privileges to view will be visible.

        :param page_token: Specifies the page of items to be returned from a requested list. The value of `page_token` for the next page of returns is found in the `next_page_token` of the current response. If there are no further items to return, the value of `next_page_token` will be empty.  Example:  > `GET ...//subscriptions?pageToken={next_page_value}` Combining Path Parameters:  A page_token expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_token: str
        :param user_id: 
        :type user_id: str
        :param page_size: Specifies the number of results in a paged response.   Example:   > `GET ...//subscriptions?pageSize=50`   Combining Path Parameters:  A page_size expression can be combined with other path parameters using an ampersand (&) as a separator, and is typically used along with a page number expression.   <a href='https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_paging.htm' target='_blank'>Learn more about paginating the response</a>.
        :type page_size: int
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param metric_id: 
        :type metric_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_list_subscriptions_serialize(
            page_token=page_token,
            user_id=user_id,
            page_size=page_size,
            x_tableau_auth=x_tableau_auth,
            metric_id=metric_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1ListSubscriptionsResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pulse_subscription_service_list_subscriptions_serialize(
        self,
        page_token,
        user_id,
        page_size,
        x_tableau_auth,
        metric_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page_token is not None:
            
            _query_params.append(('page_token', page_token))
            
        if user_id is not None:
            
            _query_params.append(('user_id', user_id))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if metric_id is not None:
            
            _query_params.append(('metric_id', metric_id))
            
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.pulse.subscriptionservice.v1.ListSubscriptionsResponse+json', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/-/pulse/subscriptions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pulse_subscription_service_update_subscription(
        self,
        id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_pulse_subscriptionservice_v1_update_subscription_request: Optional[TableauPulseSubscriptionserviceV1UpdateSubscriptionRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauPulseSubscriptionserviceV1UpdateSubscriptionResponse:
        """Updates a subscription.

        Updates a subscription.

        :param id: (required)
        :type id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_pulse_subscriptionservice_v1_update_subscription_request:
        :type tableau_pulse_subscriptionservice_v1_update_subscription_request: TableauPulseSubscriptionserviceV1UpdateSubscriptionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_update_subscription_serialize(
            id=id,
            x_tableau_auth=x_tableau_auth,
            tableau_pulse_subscriptionservice_v1_update_subscription_request=tableau_pulse_subscriptionservice_v1_update_subscription_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1UpdateSubscriptionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pulse_subscription_service_update_subscription_with_http_info(
        self,
        id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_pulse_subscriptionservice_v1_update_subscription_request: Optional[TableauPulseSubscriptionserviceV1UpdateSubscriptionRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauPulseSubscriptionserviceV1UpdateSubscriptionResponse]:
        """Updates a subscription.

        Updates a subscription.

        :param id: (required)
        :type id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_pulse_subscriptionservice_v1_update_subscription_request:
        :type tableau_pulse_subscriptionservice_v1_update_subscription_request: TableauPulseSubscriptionserviceV1UpdateSubscriptionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_update_subscription_serialize(
            id=id,
            x_tableau_auth=x_tableau_auth,
            tableau_pulse_subscriptionservice_v1_update_subscription_request=tableau_pulse_subscriptionservice_v1_update_subscription_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1UpdateSubscriptionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pulse_subscription_service_update_subscription_without_preload_content(
        self,
        id: StrictStr,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_pulse_subscriptionservice_v1_update_subscription_request: Optional[TableauPulseSubscriptionserviceV1UpdateSubscriptionRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Updates a subscription.

        Updates a subscription.

        :param id: (required)
        :type id: str
        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_pulse_subscriptionservice_v1_update_subscription_request:
        :type tableau_pulse_subscriptionservice_v1_update_subscription_request: TableauPulseSubscriptionserviceV1UpdateSubscriptionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_update_subscription_serialize(
            id=id,
            x_tableau_auth=x_tableau_auth,
            tableau_pulse_subscriptionservice_v1_update_subscription_request=tableau_pulse_subscriptionservice_v1_update_subscription_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1UpdateSubscriptionResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pulse_subscription_service_update_subscription_serialize(
        self,
        id,
        x_tableau_auth,
        tableau_pulse_subscriptionservice_v1_update_subscription_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter
        if tableau_pulse_subscriptionservice_v1_update_subscription_request is not None:
            _body_params = tableau_pulse_subscriptionservice_v1_update_subscription_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.pulse.subscriptionservice.v1.UpdateSubscriptionResponse+json', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.tableau.pulse.subscriptionservice.v1.UpdateSubscriptionRequest+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/-/pulse/subscriptions/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pulse_subscription_service_update_user_digest_preferences(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request: Optional[TableauPulseSubscriptionserviceV1UpdateUserDigestPreferencesRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauPulseSubscriptionserviceV1UpdateUserDigestPreferencesResponse:
        """Update user digest preferences

        Updates the user's digest preferences for which delivery channels to receive notifications on, and at what cadence.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request:
        :type tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request: TableauPulseSubscriptionserviceV1UpdateUserDigestPreferencesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_update_user_digest_preferences_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request=tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1UpdateUserDigestPreferencesResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pulse_subscription_service_update_user_digest_preferences_with_http_info(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request: Optional[TableauPulseSubscriptionserviceV1UpdateUserDigestPreferencesRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauPulseSubscriptionserviceV1UpdateUserDigestPreferencesResponse]:
        """Update user digest preferences

        Updates the user's digest preferences for which delivery channels to receive notifications on, and at what cadence.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request:
        :type tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request: TableauPulseSubscriptionserviceV1UpdateUserDigestPreferencesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_update_user_digest_preferences_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request=tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1UpdateUserDigestPreferencesResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pulse_subscription_service_update_user_digest_preferences_without_preload_content(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request: Optional[TableauPulseSubscriptionserviceV1UpdateUserDigestPreferencesRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update user digest preferences

        Updates the user's digest preferences for which delivery channels to receive notifications on, and at what cadence.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request:
        :type tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request: TableauPulseSubscriptionserviceV1UpdateUserDigestPreferencesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_update_user_digest_preferences_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request=tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1UpdateUserDigestPreferencesResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pulse_subscription_service_update_user_digest_preferences_serialize(
        self,
        x_tableau_auth,
        tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter
        if tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request is not None:
            _body_params = tableau_pulse_subscriptionservice_v1_update_user_digest_preferences_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.pulse.subscriptionservice.v1.UpdateUserDigestPreferencesResponse+json', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.tableau.pulse.subscriptionservice.v1.UpdateUserDigestPreferencesRequest+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/-/pulse/user/digestpreferences',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pulse_subscription_service_update_user_preferences(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_pulse_subscriptionservice_v1_update_user_preferences_request: Optional[TableauPulseSubscriptionserviceV1UpdateUserPreferencesRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableauPulseSubscriptionserviceV1UpdateUserPreferencesResponse:
        """Update user preferences

        Updates the user's preferences for notifications channels and cadence, and for grouping and sorting followed metrics in REST responses and UI.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_pulse_subscriptionservice_v1_update_user_preferences_request:
        :type tableau_pulse_subscriptionservice_v1_update_user_preferences_request: TableauPulseSubscriptionserviceV1UpdateUserPreferencesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_update_user_preferences_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_pulse_subscriptionservice_v1_update_user_preferences_request=tableau_pulse_subscriptionservice_v1_update_user_preferences_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1UpdateUserPreferencesResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pulse_subscription_service_update_user_preferences_with_http_info(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_pulse_subscriptionservice_v1_update_user_preferences_request: Optional[TableauPulseSubscriptionserviceV1UpdateUserPreferencesRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableauPulseSubscriptionserviceV1UpdateUserPreferencesResponse]:
        """Update user preferences

        Updates the user's preferences for notifications channels and cadence, and for grouping and sorting followed metrics in REST responses and UI.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_pulse_subscriptionservice_v1_update_user_preferences_request:
        :type tableau_pulse_subscriptionservice_v1_update_user_preferences_request: TableauPulseSubscriptionserviceV1UpdateUserPreferencesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_update_user_preferences_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_pulse_subscriptionservice_v1_update_user_preferences_request=tableau_pulse_subscriptionservice_v1_update_user_preferences_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1UpdateUserPreferencesResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pulse_subscription_service_update_user_preferences_without_preload_content(
        self,
        x_tableau_auth: Optional[StrictStr] = None,
        tableau_pulse_subscriptionservice_v1_update_user_preferences_request: Optional[TableauPulseSubscriptionserviceV1UpdateUserPreferencesRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update user preferences

        Updates the user's preferences for notifications channels and cadence, and for grouping and sorting followed metrics in REST responses and UI.

        :param x_tableau_auth:
        :type x_tableau_auth: str
        :param tableau_pulse_subscriptionservice_v1_update_user_preferences_request:
        :type tableau_pulse_subscriptionservice_v1_update_user_preferences_request: TableauPulseSubscriptionserviceV1UpdateUserPreferencesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pulse_subscription_service_update_user_preferences_serialize(
            x_tableau_auth=x_tableau_auth,
            tableau_pulse_subscriptionservice_v1_update_user_preferences_request=tableau_pulse_subscriptionservice_v1_update_user_preferences_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableauPulseSubscriptionserviceV1UpdateUserPreferencesResponse",
            '400': "TableauError",
            '401': "TableauError",
            '500': "TableauError",
            '404': "TableauError",
            '503': "TableauError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pulse_subscription_service_update_user_preferences_serialize(
        self,
        x_tableau_auth,
        tableau_pulse_subscriptionservice_v1_update_user_preferences_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_tableau_auth is not None:
            _header_params['X-Tableau-Auth'] = x_tableau_auth
        # process the form parameters
        # process the body parameter
        if tableau_pulse_subscriptionservice_v1_update_user_preferences_request is not None:
            _body_params = tableau_pulse_subscriptionservice_v1_update_user_preferences_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.tableau.pulse.subscriptionservice.v1.UpdateUserPreferencesResponse+json', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.tableau.pulse.subscriptionservice.v1.UpdateUserPreferencesRequest+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/-/pulse/user/preferences',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


