# coding: utf-8

"""
    Tableau Services APIs

    Open API specification for Tableau Services APIs

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.tableau_pulse_insightsservice_types_v1_insight_feedback_metadata import TableauPulseInsightsserviceTypesV1InsightFeedbackMetadata
from openapi_client.models.tableau_pulse_insightsservice_v1_table import TableauPulseInsightsserviceV1Table
from typing import Optional, Set
from typing_extensions import Self

class TableauPulseInsightsserviceV1Insight(BaseModel):
    """
    TableauPulseInsightsserviceV1Insight
    """ # noqa: E501
    type: Optional[StrictStr] = None
    version: Optional[StrictInt] = None
    content: Optional[StrictStr] = None
    markup: Optional[StrictStr] = None
    viz: Optional[Any] = None
    facts: Optional[Any] = None
    characterization: Optional[StrictStr] = None
    question: Optional[StrictStr] = None
    score: Optional[Union[StrictFloat, StrictInt]] = None
    id: Optional[StrictStr] = None
    insight_feedback_metadata: Optional[TableauPulseInsightsserviceTypesV1InsightFeedbackMetadata] = None
    table: Optional[TableauPulseInsightsserviceV1Table] = None
    generation_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["type", "version", "content", "markup", "viz", "facts", "characterization", "question", "score", "id", "insight_feedback_metadata", "table", "generation_id"]

    @field_validator('characterization')
    def characterization_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHARACTERIZATION_UNSPECIFIED', 'CHARACTERIZATION_NORMAL', 'CHARACTERIZATION_UNUSUAL']):
            raise ValueError("must be one of enum values ('CHARACTERIZATION_UNSPECIFIED', 'CHARACTERIZATION_NORMAL', 'CHARACTERIZATION_UNUSUAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableauPulseInsightsserviceV1Insight from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of insight_feedback_metadata
        if self.insight_feedback_metadata:
            _dict['insight_feedback_metadata'] = self.insight_feedback_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of table
        if self.table:
            _dict['table'] = self.table.to_dict()
        # set to None if viz (nullable) is None
        # and model_fields_set contains the field
        if self.viz is None and "viz" in self.model_fields_set:
            _dict['viz'] = None

        # set to None if facts (nullable) is None
        # and model_fields_set contains the field
        if self.facts is None and "facts" in self.model_fields_set:
            _dict['facts'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableauPulseInsightsserviceV1Insight from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "version": obj.get("version"),
            "content": obj.get("content"),
            "markup": obj.get("markup"),
            "viz": obj.get("viz"),
            "facts": obj.get("facts"),
            "characterization": obj.get("characterization"),
            "question": obj.get("question"),
            "score": obj.get("score"),
            "id": obj.get("id"),
            "insight_feedback_metadata": TableauPulseInsightsserviceTypesV1InsightFeedbackMetadata.from_dict(obj["insight_feedback_metadata"]) if obj.get("insight_feedback_metadata") is not None else None,
            "table": TableauPulseInsightsserviceV1Table.from_dict(obj["table"]) if obj.get("table") is not None else None,
            "generation_id": obj.get("generation_id")
        })
        return _obj


