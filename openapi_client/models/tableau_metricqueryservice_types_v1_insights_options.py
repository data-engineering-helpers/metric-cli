# coding: utf-8

"""
    Tableau Services APIs

    Open API specification for Tableau Services APIs

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tableau_metricqueryservice_types_v1_insights_options_insight_setting import TableauMetricqueryserviceTypesV1InsightsOptionsInsightSetting
from typing import Optional, Set
from typing_extensions import Self

class TableauMetricqueryserviceTypesV1InsightsOptions(BaseModel):
    """
    TableauMetricqueryserviceTypesV1InsightsOptions
    """ # noqa: E501
    show_insights: Optional[StrictBool] = None
    settings: Optional[List[TableauMetricqueryserviceTypesV1InsightsOptionsInsightSetting]] = None
    nested_insight_setting: Optional[Dict[str, Any]] = Field(default=None, alias="nestedInsightSetting")
    __properties: ClassVar[List[str]] = ["show_insights", "settings", "nestedInsightSetting"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableauMetricqueryserviceTypesV1InsightsOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in settings (list)
        _items = []
        if self.settings:
            for _item_settings in self.settings:
                if _item_settings:
                    _items.append(_item_settings.to_dict())
            _dict['settings'] = _items
        # override the default output from pydantic by calling `to_dict()` of nested_insight_setting
        if self.nested_insight_setting:
            _dict['nestedInsightSetting'] = self.nested_insight_setting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableauMetricqueryserviceTypesV1InsightsOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "show_insights": obj.get("show_insights"),
            "settings": [TableauMetricqueryserviceTypesV1InsightsOptionsInsightSetting.from_dict(_item) for _item in obj["settings"]] if obj.get("settings") is not None else None,
            "nestedInsightSetting": TableauMetricqueryserviceTypesV1InsightsOptionsInsightSetting.from_dict(obj["nestedInsightSetting"]) if obj.get("nestedInsightSetting") is not None else None
        })
        return _obj


