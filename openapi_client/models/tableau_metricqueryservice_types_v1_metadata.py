# coding: utf-8

"""
    Tableau Services APIs

    Open API specification for Tableau Services APIs

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tableau_metricqueryservice_types_v1_metadata_user import TableauMetricqueryserviceTypesV1MetadataUser
from typing import Optional, Set
from typing_extensions import Self

class TableauMetricqueryserviceTypesV1Metadata(BaseModel):
    """
    TableauMetricqueryserviceTypesV1Metadata
    """ # noqa: E501
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    user_link: Optional[StrictStr] = None
    user_link_name: Optional[StrictStr] = None
    schema_version: Optional[StrictStr] = None
    metric_version: Optional[int] = None
    definition_version: Optional[int] = None
    last_updated_user: Optional[TableauMetricqueryserviceTypesV1MetadataUser] = None
    nested_user: Optional[Dict[str, Any]] = Field(default=None, alias="nestedUser")
    __properties: ClassVar[List[str]] = ["name", "description", "id", "user_link", "user_link_name", "schema_version", "metric_version", "definition_version", "last_updated_user", "nestedUser"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableauMetricqueryserviceTypesV1Metadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_updated_user
        if self.last_updated_user:
            _dict['last_updated_user'] = self.last_updated_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nested_user
        if self.nested_user:
            _dict['nestedUser'] = self.nested_user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableauMetricqueryserviceTypesV1Metadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "user_link": obj.get("user_link"),
            "user_link_name": obj.get("user_link_name"),
            "schema_version": obj.get("schema_version"),
            "metric_version": obj.get("metric_version"),
            "definition_version": obj.get("definition_version"),
            "last_updated_user": TableauMetricqueryserviceTypesV1MetadataUser.from_dict(obj["last_updated_user"]) if obj.get("last_updated_user") is not None else None,
            "nestedUser": TableauMetricqueryserviceTypesV1MetadataUser.from_dict(obj["nestedUser"]) if obj.get("nestedUser") is not None else None
        })
        return _obj


