# coding: utf-8

"""
    Tableau Services APIs

    Open API specification for Tableau Services APIs

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tableau_metricqueryservice_types_v1_representation_options_number_units import TableauMetricqueryserviceTypesV1RepresentationOptionsNumberUnits
from openapi_client.models.tableau_metricqueryservice_types_v1_representation_options_row_level_entity_names import TableauMetricqueryserviceTypesV1RepresentationOptionsRowLevelEntityNames
from openapi_client.models.tableau_metricqueryservice_types_v1_representation_options_row_level_id_field import TableauMetricqueryserviceTypesV1RepresentationOptionsRowLevelIDField
from openapi_client.models.tableau_metricqueryservice_types_v1_representation_options_row_level_name_field import TableauMetricqueryserviceTypesV1RepresentationOptionsRowLevelNameField
from typing import Optional, Set
from typing_extensions import Self

class TableauMetricqueryserviceTypesV1RepresentationOptions(BaseModel):
    """
    TableauMetricqueryserviceTypesV1RepresentationOptions
    """ # noqa: E501
    type: Optional[StrictStr] = None
    number_units: Optional[TableauMetricqueryserviceTypesV1RepresentationOptionsNumberUnits] = None
    sentiment_type: Optional[StrictStr] = None
    row_level_id_field: Optional[TableauMetricqueryserviceTypesV1RepresentationOptionsRowLevelIDField] = None
    row_level_entity_names: Optional[TableauMetricqueryserviceTypesV1RepresentationOptionsRowLevelEntityNames] = None
    row_level_name_field: Optional[TableauMetricqueryserviceTypesV1RepresentationOptionsRowLevelNameField] = None
    currency_code: Optional[StrictStr] = None
    nested_number_units: Optional[Dict[str, Any]] = Field(default=None, alias="nestedNumberUnits")
    nested_row_level_id_field: Optional[Dict[str, Any]] = Field(default=None, alias="nestedRowLevelIDField")
    nested_row_level_name_field: Optional[Dict[str, Any]] = Field(default=None, alias="nestedRowLevelNameField")
    nested_row_level_entity_names: Optional[Dict[str, Any]] = Field(default=None, alias="nestedRowLevelEntityNames")
    __properties: ClassVar[List[str]] = ["type", "number_units", "sentiment_type", "row_level_id_field", "row_level_entity_names", "row_level_name_field", "currency_code", "nestedNumberUnits", "nestedRowLevelIDField", "nestedRowLevelNameField", "nestedRowLevelEntityNames"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NUMBER_FORMAT_TYPE_UNSPECIFIED', 'NUMBER_FORMAT_TYPE_NUMBER', 'NUMBER_FORMAT_TYPE_PERCENT', 'NUMBER_FORMAT_TYPE_CURRENCY']):
            raise ValueError("must be one of enum values ('NUMBER_FORMAT_TYPE_UNSPECIFIED', 'NUMBER_FORMAT_TYPE_NUMBER', 'NUMBER_FORMAT_TYPE_PERCENT', 'NUMBER_FORMAT_TYPE_CURRENCY')")
        return value

    @field_validator('sentiment_type')
    def sentiment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SENTIMENT_TYPE_UNSPECIFIED', 'SENTIMENT_TYPE_NONE', 'SENTIMENT_TYPE_UP_IS_GOOD', 'SENTIMENT_TYPE_DOWN_IS_GOOD']):
            raise ValueError("must be one of enum values ('SENTIMENT_TYPE_UNSPECIFIED', 'SENTIMENT_TYPE_NONE', 'SENTIMENT_TYPE_UP_IS_GOOD', 'SENTIMENT_TYPE_DOWN_IS_GOOD')")
        return value

    @field_validator('currency_code')
    def currency_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CURRENCY_CODE_UNSPECIFIED', 'CURRENCY_CODE_AED', 'CURRENCY_CODE_AFN', 'CURRENCY_CODE_ALL', 'CURRENCY_CODE_AMD', 'CURRENCY_CODE_ARS', 'CURRENCY_CODE_AUD', 'CURRENCY_CODE_AZN', 'CURRENCY_CODE_BAM', 'CURRENCY_CODE_BDT', 'CURRENCY_CODE_BGN', 'CURRENCY_CODE_BHD', 'CURRENCY_CODE_BND', 'CURRENCY_CODE_BOB', 'CURRENCY_CODE_BRL', 'CURRENCY_CODE_BTN', 'CURRENCY_CODE_BWP', 'CURRENCY_CODE_BYN', 'CURRENCY_CODE_BZD', 'CURRENCY_CODE_CAD', 'CURRENCY_CODE_CDF', 'CURRENCY_CODE_CHF', 'CURRENCY_CODE_CLP', 'CURRENCY_CODE_CNY', 'CURRENCY_CODE_COP', 'CURRENCY_CODE_CRC', 'CURRENCY_CODE_CUP', 'CURRENCY_CODE_CZK', 'CURRENCY_CODE_DKK', 'CURRENCY_CODE_DOP', 'CURRENCY_CODE_DZD', 'CURRENCY_CODE_EGP', 'CURRENCY_CODE_ERN', 'CURRENCY_CODE_ETB', 'CURRENCY_CODE_EUR', 'CURRENCY_CODE_GBP', 'CURRENCY_CODE_GEL', 'CURRENCY_CODE_GTQ', 'CURRENCY_CODE_HKD', 'CURRENCY_CODE_HNL', 'CURRENCY_CODE_HTG', 'CURRENCY_CODE_HUF', 'CURRENCY_CODE_IDR', 'CURRENCY_CODE_ILS', 'CURRENCY_CODE_INR', 'CURRENCY_CODE_IQD', 'CURRENCY_CODE_IRR', 'CURRENCY_CODE_ISK', 'CURRENCY_CODE_JMD', 'CURRENCY_CODE_JOD', 'CURRENCY_CODE_JPY', 'CURRENCY_CODE_KES', 'CURRENCY_CODE_KGS', 'CURRENCY_CODE_KHR', 'CURRENCY_CODE_KRW', 'CURRENCY_CODE_KWD', 'CURRENCY_CODE_KZT', 'CURRENCY_CODE_LAK', 'CURRENCY_CODE_LBP', 'CURRENCY_CODE_LKR', 'CURRENCY_CODE_LYD', 'CURRENCY_CODE_MAD', 'CURRENCY_CODE_MDL', 'CURRENCY_CODE_MKD', 'CURRENCY_CODE_MMK', 'CURRENCY_CODE_MNT', 'CURRENCY_CODE_MVR', 'CURRENCY_CODE_MXN', 'CURRENCY_CODE_MYR', 'CURRENCY_CODE_NAD', 'CURRENCY_CODE_NGN', 'CURRENCY_CODE_NIO', 'CURRENCY_CODE_NOK', 'CURRENCY_CODE_NPR', 'CURRENCY_CODE_NZD', 'CURRENCY_CODE_OMR', 'CURRENCY_CODE_PAB', 'CURRENCY_CODE_PEN', 'CURRENCY_CODE_PHP', 'CURRENCY_CODE_PKR', 'CURRENCY_CODE_PLN', 'CURRENCY_CODE_PYG', 'CURRENCY_CODE_QAR', 'CURRENCY_CODE_RON', 'CURRENCY_CODE_RSD', 'CURRENCY_CODE_RUB', 'CURRENCY_CODE_RWF', 'CURRENCY_CODE_SAR', 'CURRENCY_CODE_SEK', 'CURRENCY_CODE_SGD', 'CURRENCY_CODE_SOS', 'CURRENCY_CODE_SYP', 'CURRENCY_CODE_THB', 'CURRENCY_CODE_TMT', 'CURRENCY_CODE_TND', 'CURRENCY_CODE_TRY', 'CURRENCY_CODE_TTD', 'CURRENCY_CODE_UAH', 'CURRENCY_CODE_USD', 'CURRENCY_CODE_UYU', 'CURRENCY_CODE_UZS', 'CURRENCY_CODE_VED', 'CURRENCY_CODE_VND', 'CURRENCY_CODE_XAF', 'CURRENCY_CODE_XOF', 'CURRENCY_CODE_YER', 'CURRENCY_CODE_ZAR', 'CURRENCY_CODE_ANG', 'CURRENCY_CODE_AOA', 'CURRENCY_CODE_AWG', 'CURRENCY_CODE_BBD', 'CURRENCY_CODE_BIF', 'CURRENCY_CODE_BMD', 'CURRENCY_CODE_BOV', 'CURRENCY_CODE_BSD', 'CURRENCY_CODE_CHE', 'CURRENCY_CODE_CHW', 'CURRENCY_CODE_CLF', 'CURRENCY_CODE_COU', 'CURRENCY_CODE_CUC', 'CURRENCY_CODE_CVE', 'CURRENCY_CODE_DJF', 'CURRENCY_CODE_FJD', 'CURRENCY_CODE_FKP', 'CURRENCY_CODE_GHS', 'CURRENCY_CODE_GIP', 'CURRENCY_CODE_GMD', 'CURRENCY_CODE_GNF', 'CURRENCY_CODE_GYD', 'CURRENCY_CODE_KMF', 'CURRENCY_CODE_KPW', 'CURRENCY_CODE_KYD', 'CURRENCY_CODE_LRD', 'CURRENCY_CODE_LSL', 'CURRENCY_CODE_MGA', 'CURRENCY_CODE_MOP', 'CURRENCY_CODE_MRU', 'CURRENCY_CODE_MUR', 'CURRENCY_CODE_MWK', 'CURRENCY_CODE_MXV', 'CURRENCY_CODE_MZN', 'CURRENCY_CODE_PGK', 'CURRENCY_CODE_SBD', 'CURRENCY_CODE_SCR', 'CURRENCY_CODE_SDG', 'CURRENCY_CODE_SHP', 'CURRENCY_CODE_SLE', 'CURRENCY_CODE_SRD', 'CURRENCY_CODE_SSP', 'CURRENCY_CODE_STN', 'CURRENCY_CODE_SVC', 'CURRENCY_CODE_SZL', 'CURRENCY_CODE_TJS', 'CURRENCY_CODE_TOP', 'CURRENCY_CODE_TWD', 'CURRENCY_CODE_TZS', 'CURRENCY_CODE_UGX', 'CURRENCY_CODE_USN', 'CURRENCY_CODE_UYI', 'CURRENCY_CODE_UYW', 'CURRENCY_CODE_VES', 'CURRENCY_CODE_VUV', 'CURRENCY_CODE_WST', 'CURRENCY_CODE_XCD', 'CURRENCY_CODE_XPF', 'CURRENCY_CODE_ZMW', 'CURRENCY_CODE_ZWL']):
            raise ValueError("must be one of enum values ('CURRENCY_CODE_UNSPECIFIED', 'CURRENCY_CODE_AED', 'CURRENCY_CODE_AFN', 'CURRENCY_CODE_ALL', 'CURRENCY_CODE_AMD', 'CURRENCY_CODE_ARS', 'CURRENCY_CODE_AUD', 'CURRENCY_CODE_AZN', 'CURRENCY_CODE_BAM', 'CURRENCY_CODE_BDT', 'CURRENCY_CODE_BGN', 'CURRENCY_CODE_BHD', 'CURRENCY_CODE_BND', 'CURRENCY_CODE_BOB', 'CURRENCY_CODE_BRL', 'CURRENCY_CODE_BTN', 'CURRENCY_CODE_BWP', 'CURRENCY_CODE_BYN', 'CURRENCY_CODE_BZD', 'CURRENCY_CODE_CAD', 'CURRENCY_CODE_CDF', 'CURRENCY_CODE_CHF', 'CURRENCY_CODE_CLP', 'CURRENCY_CODE_CNY', 'CURRENCY_CODE_COP', 'CURRENCY_CODE_CRC', 'CURRENCY_CODE_CUP', 'CURRENCY_CODE_CZK', 'CURRENCY_CODE_DKK', 'CURRENCY_CODE_DOP', 'CURRENCY_CODE_DZD', 'CURRENCY_CODE_EGP', 'CURRENCY_CODE_ERN', 'CURRENCY_CODE_ETB', 'CURRENCY_CODE_EUR', 'CURRENCY_CODE_GBP', 'CURRENCY_CODE_GEL', 'CURRENCY_CODE_GTQ', 'CURRENCY_CODE_HKD', 'CURRENCY_CODE_HNL', 'CURRENCY_CODE_HTG', 'CURRENCY_CODE_HUF', 'CURRENCY_CODE_IDR', 'CURRENCY_CODE_ILS', 'CURRENCY_CODE_INR', 'CURRENCY_CODE_IQD', 'CURRENCY_CODE_IRR', 'CURRENCY_CODE_ISK', 'CURRENCY_CODE_JMD', 'CURRENCY_CODE_JOD', 'CURRENCY_CODE_JPY', 'CURRENCY_CODE_KES', 'CURRENCY_CODE_KGS', 'CURRENCY_CODE_KHR', 'CURRENCY_CODE_KRW', 'CURRENCY_CODE_KWD', 'CURRENCY_CODE_KZT', 'CURRENCY_CODE_LAK', 'CURRENCY_CODE_LBP', 'CURRENCY_CODE_LKR', 'CURRENCY_CODE_LYD', 'CURRENCY_CODE_MAD', 'CURRENCY_CODE_MDL', 'CURRENCY_CODE_MKD', 'CURRENCY_CODE_MMK', 'CURRENCY_CODE_MNT', 'CURRENCY_CODE_MVR', 'CURRENCY_CODE_MXN', 'CURRENCY_CODE_MYR', 'CURRENCY_CODE_NAD', 'CURRENCY_CODE_NGN', 'CURRENCY_CODE_NIO', 'CURRENCY_CODE_NOK', 'CURRENCY_CODE_NPR', 'CURRENCY_CODE_NZD', 'CURRENCY_CODE_OMR', 'CURRENCY_CODE_PAB', 'CURRENCY_CODE_PEN', 'CURRENCY_CODE_PHP', 'CURRENCY_CODE_PKR', 'CURRENCY_CODE_PLN', 'CURRENCY_CODE_PYG', 'CURRENCY_CODE_QAR', 'CURRENCY_CODE_RON', 'CURRENCY_CODE_RSD', 'CURRENCY_CODE_RUB', 'CURRENCY_CODE_RWF', 'CURRENCY_CODE_SAR', 'CURRENCY_CODE_SEK', 'CURRENCY_CODE_SGD', 'CURRENCY_CODE_SOS', 'CURRENCY_CODE_SYP', 'CURRENCY_CODE_THB', 'CURRENCY_CODE_TMT', 'CURRENCY_CODE_TND', 'CURRENCY_CODE_TRY', 'CURRENCY_CODE_TTD', 'CURRENCY_CODE_UAH', 'CURRENCY_CODE_USD', 'CURRENCY_CODE_UYU', 'CURRENCY_CODE_UZS', 'CURRENCY_CODE_VED', 'CURRENCY_CODE_VND', 'CURRENCY_CODE_XAF', 'CURRENCY_CODE_XOF', 'CURRENCY_CODE_YER', 'CURRENCY_CODE_ZAR', 'CURRENCY_CODE_ANG', 'CURRENCY_CODE_AOA', 'CURRENCY_CODE_AWG', 'CURRENCY_CODE_BBD', 'CURRENCY_CODE_BIF', 'CURRENCY_CODE_BMD', 'CURRENCY_CODE_BOV', 'CURRENCY_CODE_BSD', 'CURRENCY_CODE_CHE', 'CURRENCY_CODE_CHW', 'CURRENCY_CODE_CLF', 'CURRENCY_CODE_COU', 'CURRENCY_CODE_CUC', 'CURRENCY_CODE_CVE', 'CURRENCY_CODE_DJF', 'CURRENCY_CODE_FJD', 'CURRENCY_CODE_FKP', 'CURRENCY_CODE_GHS', 'CURRENCY_CODE_GIP', 'CURRENCY_CODE_GMD', 'CURRENCY_CODE_GNF', 'CURRENCY_CODE_GYD', 'CURRENCY_CODE_KMF', 'CURRENCY_CODE_KPW', 'CURRENCY_CODE_KYD', 'CURRENCY_CODE_LRD', 'CURRENCY_CODE_LSL', 'CURRENCY_CODE_MGA', 'CURRENCY_CODE_MOP', 'CURRENCY_CODE_MRU', 'CURRENCY_CODE_MUR', 'CURRENCY_CODE_MWK', 'CURRENCY_CODE_MXV', 'CURRENCY_CODE_MZN', 'CURRENCY_CODE_PGK', 'CURRENCY_CODE_SBD', 'CURRENCY_CODE_SCR', 'CURRENCY_CODE_SDG', 'CURRENCY_CODE_SHP', 'CURRENCY_CODE_SLE', 'CURRENCY_CODE_SRD', 'CURRENCY_CODE_SSP', 'CURRENCY_CODE_STN', 'CURRENCY_CODE_SVC', 'CURRENCY_CODE_SZL', 'CURRENCY_CODE_TJS', 'CURRENCY_CODE_TOP', 'CURRENCY_CODE_TWD', 'CURRENCY_CODE_TZS', 'CURRENCY_CODE_UGX', 'CURRENCY_CODE_USN', 'CURRENCY_CODE_UYI', 'CURRENCY_CODE_UYW', 'CURRENCY_CODE_VES', 'CURRENCY_CODE_VUV', 'CURRENCY_CODE_WST', 'CURRENCY_CODE_XCD', 'CURRENCY_CODE_XPF', 'CURRENCY_CODE_ZMW', 'CURRENCY_CODE_ZWL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableauMetricqueryserviceTypesV1RepresentationOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of number_units
        if self.number_units:
            _dict['number_units'] = self.number_units.to_dict()
        # override the default output from pydantic by calling `to_dict()` of row_level_id_field
        if self.row_level_id_field:
            _dict['row_level_id_field'] = self.row_level_id_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of row_level_entity_names
        if self.row_level_entity_names:
            _dict['row_level_entity_names'] = self.row_level_entity_names.to_dict()
        # override the default output from pydantic by calling `to_dict()` of row_level_name_field
        if self.row_level_name_field:
            _dict['row_level_name_field'] = self.row_level_name_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nested_number_units
        if self.nested_number_units:
            _dict['nestedNumberUnits'] = self.nested_number_units.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nested_row_level_id_field
        if self.nested_row_level_id_field:
            _dict['nestedRowLevelIDField'] = self.nested_row_level_id_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nested_row_level_name_field
        if self.nested_row_level_name_field:
            _dict['nestedRowLevelNameField'] = self.nested_row_level_name_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nested_row_level_entity_names
        if self.nested_row_level_entity_names:
            _dict['nestedRowLevelEntityNames'] = self.nested_row_level_entity_names.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableauMetricqueryserviceTypesV1RepresentationOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "number_units": TableauMetricqueryserviceTypesV1RepresentationOptionsNumberUnits.from_dict(obj["number_units"]) if obj.get("number_units") is not None else None,
            "sentiment_type": obj.get("sentiment_type"),
            "row_level_id_field": TableauMetricqueryserviceTypesV1RepresentationOptionsRowLevelIDField.from_dict(obj["row_level_id_field"]) if obj.get("row_level_id_field") is not None else None,
            "row_level_entity_names": TableauMetricqueryserviceTypesV1RepresentationOptionsRowLevelEntityNames.from_dict(obj["row_level_entity_names"]) if obj.get("row_level_entity_names") is not None else None,
            "row_level_name_field": TableauMetricqueryserviceTypesV1RepresentationOptionsRowLevelNameField.from_dict(obj["row_level_name_field"]) if obj.get("row_level_name_field") is not None else None,
            "currency_code": obj.get("currency_code"),
            "nestedNumberUnits": TableauMetricqueryserviceTypesV1RepresentationOptionsNumberUnits.from_dict(obj["nestedNumberUnits"]) if obj.get("nestedNumberUnits") is not None else None,
            "nestedRowLevelIDField": TableauMetricqueryserviceTypesV1RepresentationOptionsRowLevelIDField.from_dict(obj["nestedRowLevelIDField"]) if obj.get("nestedRowLevelIDField") is not None else None,
            "nestedRowLevelNameField": TableauMetricqueryserviceTypesV1RepresentationOptionsRowLevelNameField.from_dict(obj["nestedRowLevelNameField"]) if obj.get("nestedRowLevelNameField") is not None else None,
            "nestedRowLevelEntityNames": TableauMetricqueryserviceTypesV1RepresentationOptionsRowLevelEntityNames.from_dict(obj["nestedRowLevelEntityNames"]) if obj.get("nestedRowLevelEntityNames") is not None else None
        })
        return _obj


