# coding: utf-8

"""
    Tableau Services APIs

    Open API specification for Tableau Services APIs

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tableau_nlp_lens_publicrest_v1_value_synonym import TableauNlpLensPublicrestV1ValueSynonym
from typing import Optional, Set
from typing_extensions import Self

class TableauNlpLensPublicrestV1FieldDetail(BaseModel):
    """
    TableauNlpLensPublicrestV1FieldDetail
    """ # noqa: E501
    graph_id: Optional[StrictStr] = Field(default=None, description="Required. Field identifier for ask data. In most cases this is the column name. But for cases where the same column name repeats in multiple objects, calculated fields, or for hierarchy fields this is derived from TDS rules. To identify the graph id for a particular field, you could create a test lens with all fields from the datasource and invoke GetLens API to get a list of all fields and their field graph ids.")
    custom_label: Optional[StrictStr] = Field(default=None, description="Optional. Custom Label of the lens field. If not specified, the field inherits label from the corresponding datasource field. Up to 50 characters long")
    custom_description: Optional[StrictStr] = Field(default=None, description="Optional. Custom Description of the lens field. If not specified, the field inherits description from the corresponding datasource field. Up to 4000 characters long")
    field_synonyms: Optional[List[StrictStr]] = None
    value_synonyms: Optional[List[TableauNlpLensPublicrestV1ValueSynonym]] = None
    __properties: ClassVar[List[str]] = ["graph_id", "custom_label", "custom_description", "field_synonyms", "value_synonyms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableauNlpLensPublicrestV1FieldDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in value_synonyms (list)
        _items = []
        if self.value_synonyms:
            for _item_value_synonyms in self.value_synonyms:
                if _item_value_synonyms:
                    _items.append(_item_value_synonyms.to_dict())
            _dict['value_synonyms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableauNlpLensPublicrestV1FieldDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "graph_id": obj.get("graph_id"),
            "custom_label": obj.get("custom_label"),
            "custom_description": obj.get("custom_description"),
            "field_synonyms": obj.get("field_synonyms"),
            "value_synonyms": [TableauNlpLensPublicrestV1ValueSynonym.from_dict(_item) for _item in obj["value_synonyms"]] if obj.get("value_synonyms") is not None else None
        })
        return _obj


