# coding: utf-8

"""
    Tableau Services APIs

    Open API specification for Tableau Services APIs

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TableauEventserviceV1PublishUIEventRequest(BaseModel):
    """
    TableauEventserviceV1PublishUIEventRequest
    """ # noqa: E501
    action: Optional[StrictStr] = None
    data_source_id: Optional[StrictStr] = None
    metric_id: Optional[StrictStr] = None
    scoped_metric_id: Optional[StrictStr] = None
    feature_flags: Optional[StrictStr] = None
    metric_definition_type: Optional[StrictStr] = None
    timestamp: Optional[StrictStr] = None
    browser: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    locale: Optional[StrictStr] = None
    embedded_api_version: Optional[StrictStr] = None
    tableau_version: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["action", "data_source_id", "metric_id", "scoped_metric_id", "feature_flags", "metric_definition_type", "timestamp", "browser", "language", "locale", "embedded_api_version", "tableau_version"]

    @field_validator('metric_definition_type')
    def metric_definition_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['METRIC_DEFINITION_TYPE_UNSPECIFIED', 'BASIC_DEFINITION', 'ABSTRACT_QUERY_DEFINITION', 'VIZ_STATE_DEFINITION']):
            raise ValueError("must be one of enum values ('METRIC_DEFINITION_TYPE_UNSPECIFIED', 'BASIC_DEFINITION', 'ABSTRACT_QUERY_DEFINITION', 'VIZ_STATE_DEFINITION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableauEventserviceV1PublishUIEventRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableauEventserviceV1PublishUIEventRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "data_source_id": obj.get("data_source_id"),
            "metric_id": obj.get("metric_id"),
            "scoped_metric_id": obj.get("scoped_metric_id"),
            "feature_flags": obj.get("feature_flags"),
            "metric_definition_type": obj.get("metric_definition_type"),
            "timestamp": obj.get("timestamp"),
            "browser": obj.get("browser"),
            "language": obj.get("language"),
            "locale": obj.get("locale"),
            "embedded_api_version": obj.get("embedded_api_version"),
            "tableau_version": obj.get("tableau_version")
        })
        return _obj


