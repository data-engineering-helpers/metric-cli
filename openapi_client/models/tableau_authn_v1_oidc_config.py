# coding: utf-8

"""
    Tableau Services APIs

    Open API specification for Tableau Services APIs

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TableauAuthnV1OidcConfig(BaseModel):
    """
    TableauAuthnV1OidcConfig
    """ # noqa: E501
    client_id: Optional[StrictStr] = Field(default=None, description="Required. Provider client ID that the IdP has assigned to Tableau Server.")
    client_secret: Optional[StrictStr] = Field(default=None, description="Required. Provider client secret. This is a token that is used by Tableau Server to verify the authenticity of the response from the IdP. This value should be kept securely.")
    config_url: Optional[StrictStr] = Field(default=None, description="Required. Provider configuration URL. Specifies the location of the provider configuration discovery document that contains the OpenID provider metadata.")
    custom_scope: Optional[StrictStr] = Field(default=None, description="Custom scope user-related value to query the IdP.")
    id_claim: Optional[StrictStr] = Field(default=None, description="Required. Claim for retrieving user ID from the OIDC token. Default value is 'sub'.")
    username_claim: Optional[StrictStr] = Field(default=None, description="Required. Claim for retrieving username from the OIDC token. Default value is 'email'.")
    client_authentication: Optional[StrictStr] = Field(default=None, description="Required. Token endpoint authentication method. Default value is 'CLIENT_SECRET_BASIC'.")
    essential_acr_values: Optional[StrictStr] = Field(default=None, description="List of essential Authentication Context Reference Class values used for authentication.")
    voluntary_acr_values: Optional[StrictStr] = Field(default=None, description="List of voluntary Authentication Context Reference Class values used for authentication.")
    prompt: Optional[StrictStr] = Field(default=None, description="Prompts the user for re-authentication and consent.")
    connection_timeout: Optional[StrictInt] = Field(default=None, description="Wait time (in seconds) for connecting to the IdP.")
    read_timeout: Optional[StrictInt] = Field(default=None, description="Wait time (in seconds) for data from the IdP.")
    ignore_domain: Optional[StrictBool] = Field(default=None, description="Set value to 'true' only if the following are true: you are using email addresses as usernames in Tableau Server, you have provisioned users in the IdP with multiple domains, and you want to ignore the domain name portion of the email claim from the IdP. Default value is 'false'.")
    ignore_jwk: Optional[StrictBool] = Field(default=None, description="Set value to 'true' if the IdP does not support JWK validation. Default value is 'false'.")
    __properties: ClassVar[List[str]] = ["client_id", "client_secret", "config_url", "custom_scope", "id_claim", "username_claim", "client_authentication", "essential_acr_values", "voluntary_acr_values", "prompt", "connection_timeout", "read_timeout", "ignore_domain", "ignore_jwk"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableauAuthnV1OidcConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableauAuthnV1OidcConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "client_id": obj.get("client_id"),
            "client_secret": obj.get("client_secret"),
            "config_url": obj.get("config_url"),
            "custom_scope": obj.get("custom_scope"),
            "id_claim": obj.get("id_claim"),
            "username_claim": obj.get("username_claim"),
            "client_authentication": obj.get("client_authentication"),
            "essential_acr_values": obj.get("essential_acr_values"),
            "voluntary_acr_values": obj.get("voluntary_acr_values"),
            "prompt": obj.get("prompt"),
            "connection_timeout": obj.get("connection_timeout"),
            "read_timeout": obj.get("read_timeout"),
            "ignore_domain": obj.get("ignore_domain"),
            "ignore_jwk": obj.get("ignore_jwk")
        })
        return _obj


