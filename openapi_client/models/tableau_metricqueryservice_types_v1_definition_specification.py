# coding: utf-8

"""
    Tableau Services APIs

    Open API specification for Tableau Services APIs

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tableau_metricqueryservice_types_v1_abstract_query_specification import TableauMetricqueryserviceTypesV1AbstractQuerySpecification
from openapi_client.models.tableau_metricqueryservice_types_v1_basic_specification import TableauMetricqueryserviceTypesV1BasicSpecification
from openapi_client.models.tableau_metricqueryservice_types_v1_datasource import TableauMetricqueryserviceTypesV1Datasource
from openapi_client.models.tableau_metricqueryservice_types_v1_viz_state_specification import TableauMetricqueryserviceTypesV1VizStateSpecification
from typing import Optional, Set
from typing_extensions import Self

class TableauMetricqueryserviceTypesV1DefinitionSpecification(BaseModel):
    """
    TableauMetricqueryserviceTypesV1DefinitionSpecification
    """ # noqa: E501
    datasource: Optional[TableauMetricqueryserviceTypesV1Datasource] = None
    basic_specification: Optional[TableauMetricqueryserviceTypesV1BasicSpecification] = None
    abstract_query_specification: Optional[TableauMetricqueryserviceTypesV1AbstractQuerySpecification] = None
    viz_state_specification: Optional[TableauMetricqueryserviceTypesV1VizStateSpecification] = None
    is_running_total: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["datasource", "basic_specification", "abstract_query_specification", "viz_state_specification", "is_running_total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableauMetricqueryserviceTypesV1DefinitionSpecification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of datasource
        if self.datasource:
            _dict['datasource'] = self.datasource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of basic_specification
        if self.basic_specification:
            _dict['basic_specification'] = self.basic_specification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of abstract_query_specification
        if self.abstract_query_specification:
            _dict['abstract_query_specification'] = self.abstract_query_specification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of viz_state_specification
        if self.viz_state_specification:
            _dict['viz_state_specification'] = self.viz_state_specification.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableauMetricqueryserviceTypesV1DefinitionSpecification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datasource": TableauMetricqueryserviceTypesV1Datasource.from_dict(obj["datasource"]) if obj.get("datasource") is not None else None,
            "basic_specification": TableauMetricqueryserviceTypesV1BasicSpecification.from_dict(obj["basic_specification"]) if obj.get("basic_specification") is not None else None,
            "abstract_query_specification": TableauMetricqueryserviceTypesV1AbstractQuerySpecification.from_dict(obj["abstract_query_specification"]) if obj.get("abstract_query_specification") is not None else None,
            "viz_state_specification": TableauMetricqueryserviceTypesV1VizStateSpecification.from_dict(obj["viz_state_specification"]) if obj.get("viz_state_specification") is not None else None,
            "is_running_total": obj.get("is_running_total")
        })
        return _obj


