# coding: utf-8

"""
    Tableau Services APIs

    Open API specification for Tableau Services APIs

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TableauCustomdomainsV1SiteCustomDomainSettingsResponse(BaseModel):
    """
    TableauCustomdomainsV1SiteCustomDomainSettingsResponse
    """ # noqa: E501
    site_luid: Optional[StrictStr] = Field(default=None, description="The LUID of the Tableau site associated with the custom  domain.")
    custom_domain: Optional[StrictStr] = Field(default=None, description="The custom domain associated with the Tableau site.")
    intermediate_domain: Optional[StrictStr] = Field(default=None, description="The Tableau intermediate domain associated with the site.")
    status: Optional[StrictStr] = Field(default=None, description="The provisioning status of the custom domain.")
    request_initiation_date: Optional[StrictStr] = Field(default=None, description="The timestamp of when the create request was received. The format is like: <code>2024-06-05T08:15:09Z</code>.")
    tls_certificate_uploaded_date: Optional[StrictStr] = Field(default=None, description="The timestamp of when the TLS certificate was uploaded. The format is like: <code>2024-06-05T08:15:09Z</code>.")
    tls_certificate_expiry_date: Optional[StrictStr] = Field(default=None, description="The TLS certificate expiry date. The format is like: <code>2024-06-05T08:15:09Z</code>.")
    certificate_update_in_progress: Optional[StrictBool] = Field(default=None, description="Indicates whether or not a certificate update is in progress.")
    last_error: Optional[StrictStr] = Field(default=None, description="Latest error which happened during certificate provisioning.")
    __properties: ClassVar[List[str]] = ["site_luid", "custom_domain", "intermediate_domain", "status", "request_initiation_date", "tls_certificate_uploaded_date", "tls_certificate_expiry_date", "certificate_update_in_progress", "last_error"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Requested', 'CnameVerificationRequested', 'CnameVerificationInProgress', 'CnameVerificationFailed', 'CnameVerificationSuccess', 'Provisioning', 'Deleting', 'CustomDomainProvisioned']):
            raise ValueError("must be one of enum values ('Requested', 'CnameVerificationRequested', 'CnameVerificationInProgress', 'CnameVerificationFailed', 'CnameVerificationSuccess', 'Provisioning', 'Deleting', 'CustomDomainProvisioned')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableauCustomdomainsV1SiteCustomDomainSettingsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableauCustomdomainsV1SiteCustomDomainSettingsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "site_luid": obj.get("site_luid"),
            "custom_domain": obj.get("custom_domain"),
            "intermediate_domain": obj.get("intermediate_domain"),
            "status": obj.get("status"),
            "request_initiation_date": obj.get("request_initiation_date"),
            "tls_certificate_uploaded_date": obj.get("tls_certificate_uploaded_date"),
            "tls_certificate_expiry_date": obj.get("tls_certificate_expiry_date"),
            "certificate_update_in_progress": obj.get("certificate_update_in_progress"),
            "last_error": obj.get("last_error")
        })
        return _obj


