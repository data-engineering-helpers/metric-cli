# coding: utf-8

"""
    Tableau Services APIs

    Open API specification for Tableau Services APIs

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_protobuf_any import GoogleProtobufAny
from typing import Optional, Set
from typing_extensions import Self

class TableauEventserviceTypesV1Event(BaseModel):
    """
    TableauEventserviceTypesV1Event
    """ # noqa: E501
    id: Optional[StrictStr] = None
    event_type: Optional[StrictStr] = None
    service: Optional[StrictStr] = None
    user_id: Optional[StrictInt] = None
    site_id: Optional[StrictInt] = None
    session_id: Optional[StrictStr] = None
    timestamp: Optional[StrictStr] = None
    event_properties: Optional[GoogleProtobufAny] = None
    site_luid: Optional[StrictStr] = None
    user_luid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "event_type", "service", "user_id", "site_id", "session_id", "timestamp", "event_properties", "site_luid", "user_luid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableauEventserviceTypesV1Event from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event_properties
        if self.event_properties:
            _dict['event_properties'] = self.event_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableauEventserviceTypesV1Event from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "event_type": obj.get("event_type"),
            "service": obj.get("service"),
            "user_id": obj.get("user_id"),
            "site_id": obj.get("site_id"),
            "session_id": obj.get("session_id"),
            "timestamp": obj.get("timestamp"),
            "event_properties": GoogleProtobufAny.from_dict(obj["event_properties"]) if obj.get("event_properties") is not None else None,
            "site_luid": obj.get("site_luid"),
            "user_luid": obj.get("user_luid")
        })
        return _obj


