# coding: utf-8

"""
    Tableau Services APIs

    Open API specification for Tableau Services APIs

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tableau_metricqueryservice_types_v1_categorical_value import TableauMetricqueryserviceTypesV1CategoricalValue
from typing import Optional, Set
from typing_extensions import Self

class TableauMetricqueryserviceTypesV1Filter(BaseModel):
    """
    TableauMetricqueryserviceTypesV1Filter
    """ # noqa: E501
    var_field: Optional[StrictStr] = Field(default=None, alias="field")
    operator: Optional[StrictStr] = None
    values: Optional[List[StrictStr]] = None
    include_null: Optional[StrictBool] = None
    categorical_values: Optional[List[TableauMetricqueryserviceTypesV1CategoricalValue]] = None
    __properties: ClassVar[List[str]] = ["field", "operator", "values", "include_null", "categorical_values"]

    @field_validator('operator')
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPERATOR_UNSPECIFIED', 'OPERATOR_EQUAL', 'OPERATOR_NOT_EQUAL']):
            raise ValueError("must be one of enum values ('OPERATOR_UNSPECIFIED', 'OPERATOR_EQUAL', 'OPERATOR_NOT_EQUAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableauMetricqueryserviceTypesV1Filter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in categorical_values (list)
        _items = []
        if self.categorical_values:
            for _item_categorical_values in self.categorical_values:
                if _item_categorical_values:
                    _items.append(_item_categorical_values.to_dict())
            _dict['categorical_values'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableauMetricqueryserviceTypesV1Filter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "field": obj.get("field"),
            "operator": obj.get("operator"),
            "values": obj.get("values"),
            "include_null": obj.get("include_null"),
            "categorical_values": [TableauMetricqueryserviceTypesV1CategoricalValue.from_dict(_item) for _item in obj["categorical_values"]] if obj.get("categorical_values") is not None else None
        })
        return _obj


