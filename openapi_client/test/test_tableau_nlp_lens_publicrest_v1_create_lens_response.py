# coding: utf-8

"""
    Tableau Services APIs

    Open API specification for Tableau Services APIs

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.tableau_nlp_lens_publicrest_v1_create_lens_response import TableauNlpLensPublicrestV1CreateLensResponse

class TestTableauNlpLensPublicrestV1CreateLensResponse(unittest.TestCase):
    """TableauNlpLensPublicrestV1CreateLensResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TableauNlpLensPublicrestV1CreateLensResponse:
        """Test TableauNlpLensPublicrestV1CreateLensResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TableauNlpLensPublicrestV1CreateLensResponse`
        """
        model = TableauNlpLensPublicrestV1CreateLensResponse()
        if include_optional:
            return TableauNlpLensPublicrestV1CreateLensResponse(
                lens = openapi_client.models.tableau/nlp/lens/publicrest/v1/lens.tableau.nlp.lens.publicrest.v1.Lens(
                    id = '', 
                    name = '', 
                    site_id = '', 
                    datasource_id = '', 
                    project_id = '', 
                    owner_id = '', 
                    description = '', 
                    repository_url = '', 
                    is_feedback_enabled = True, 
                    fields = [
                        openapi_client.models.tableau/nlp/lens/publicrest/v1/lens_field.tableau.nlp.lens.publicrest.v1.LensField(
                            graph_id = '', 
                            custom_label = '', 
                            custom_description = '', 
                            field_synonyms = [
                                ''
                                ], 
                            inherited_field_synonyms = [
                                ''
                                ], 
                            value_synonyms = [
                                openapi_client.models.tableau/nlp/lens/publicrest/v1/value_synonym.tableau.nlp.lens.publicrest.v1.ValueSynonym(
                                    value = '', 
                                    synonyms = [
                                        ''
                                        ], )
                                ], 
                            inherited_value_synonyms = [
                                openapi_client.models.tableau/nlp/lens/publicrest/v1/value_synonym.tableau.nlp.lens.publicrest.v1.ValueSynonym(
                                    value = '', )
                                ], )
                        ], 
                    recommended_visualization_groups = [
                        openapi_client.models.tableau/nlp/lens/publicrest/v1/recommended_visualization_group.tableau.nlp.lens.publicrest.v1.RecommendedVisualizationGroup(
                            name = '', 
                            description = '', 
                            recommended_visualizations = [
                                openapi_client.models.tableau/nlp/lens/publicrest/v1/recommended_visualization.tableau.nlp.lens.publicrest.v1.RecommendedVisualization(
                                    expression = '', 
                                    interpretation = '', 
                                    colloquial_alias = '', )
                                ], )
                        ], )
            )
        else:
            return TableauNlpLensPublicrestV1CreateLensResponse(
        )
        """

    def testTableauNlpLensPublicrestV1CreateLensResponse(self):
        """Test TableauNlpLensPublicrestV1CreateLensResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
