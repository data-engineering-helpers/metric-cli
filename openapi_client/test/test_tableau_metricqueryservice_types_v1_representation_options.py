# coding: utf-8

"""
    Tableau Services APIs

    Open API specification for Tableau Services APIs

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.tableau_metricqueryservice_types_v1_representation_options import TableauMetricqueryserviceTypesV1RepresentationOptions

class TestTableauMetricqueryserviceTypesV1RepresentationOptions(unittest.TestCase):
    """TableauMetricqueryserviceTypesV1RepresentationOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TableauMetricqueryserviceTypesV1RepresentationOptions:
        """Test TableauMetricqueryserviceTypesV1RepresentationOptions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TableauMetricqueryserviceTypesV1RepresentationOptions`
        """
        model = TableauMetricqueryserviceTypesV1RepresentationOptions()
        if include_optional:
            return TableauMetricqueryserviceTypesV1RepresentationOptions(
                type = 'NUMBER_FORMAT_TYPE_UNSPECIFIED',
                number_units = openapi_client.models.tableau/metricqueryservice/types/v1/representation_options/number_units.tableau.metricqueryservice.types.v1.RepresentationOptions.NumberUnits(
                    singular_noun = '', 
                    plural_noun = '', ),
                sentiment_type = 'SENTIMENT_TYPE_UNSPECIFIED',
                row_level_id_field = openapi_client.models.tableau/metricqueryservice/types/v1/representation_options/row_level_id_field.tableau.metricqueryservice.types.v1.RepresentationOptions.RowLevelIDField(
                    identifier_col = '', 
                    identifier_label = '', ),
                row_level_entity_names = openapi_client.models.tableau/metricqueryservice/types/v1/representation_options/row_level_entity_names.tableau.metricqueryservice.types.v1.RepresentationOptions.RowLevelEntityNames(
                    entity_name_singular = '', 
                    entity_name_plural = '', ),
                row_level_name_field = openapi_client.models.tableau/metricqueryservice/types/v1/representation_options/row_level_name_field.tableau.metricqueryservice.types.v1.RepresentationOptions.RowLevelNameField(
                    name_col = '', ),
                currency_code = 'CURRENCY_CODE_UNSPECIFIED',
                nested_number_units = openapi_client.models.tableau/metricqueryservice/types/v1/representation_options/number_units.tableau.metricqueryservice.types.v1.RepresentationOptions.NumberUnits(
                    singular_noun = '', 
                    plural_noun = '', ),
                nested_row_level_id_field = openapi_client.models.tableau/metricqueryservice/types/v1/representation_options/row_level_id_field.tableau.metricqueryservice.types.v1.RepresentationOptions.RowLevelIDField(
                    identifier_col = '', 
                    identifier_label = '', ),
                nested_row_level_name_field = openapi_client.models.tableau/metricqueryservice/types/v1/representation_options/row_level_name_field.tableau.metricqueryservice.types.v1.RepresentationOptions.RowLevelNameField(
                    name_col = '', ),
                nested_row_level_entity_names = openapi_client.models.tableau/metricqueryservice/types/v1/representation_options/row_level_entity_names.tableau.metricqueryservice.types.v1.RepresentationOptions.RowLevelEntityNames(
                    entity_name_singular = '', 
                    entity_name_plural = '', )
            )
        else:
            return TableauMetricqueryserviceTypesV1RepresentationOptions(
        )
        """

    def testTableauMetricqueryserviceTypesV1RepresentationOptions(self):
        """Test TableauMetricqueryserviceTypesV1RepresentationOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
